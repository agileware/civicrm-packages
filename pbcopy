diff --git a/When/.gitignore b/When/.gitignore
new file mode 100755
index 0000000..91905f0
--- /dev/null
+++ b/When/.gitignore
@@ -0,0 +1,8 @@
+/vendor
+/report
+/www
+composer.phar
+composer.lock
+.DS_Store
+
+.idea
\ No newline at end of file
diff --git a/When/.travis.yml b/When/.travis.yml
new file mode 100644
index 0000000..db6cc5c
--- /dev/null
+++ b/When/.travis.yml
@@ -0,0 +1,13 @@
+language: php
+
+php:
+  - 7.1
+  - 7.2
+  - 7.3
+
+before_script:
+  - travis_retry composer self-update
+  - travis_retry composer update --no-interaction --prefer-source
+
+script:
+  - vendor/bin/phpunit
diff --git a/When/LICENSE b/When/LICENSE
new file mode 100644
index 0000000..ea129a0
--- /dev/null
+++ b/When/LICENSE
@@ -0,0 +1,19 @@
+Copyright (c) Tom Planer
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
\ No newline at end of file
diff --git a/When/README.md b/When/README.md
index 29931ac..42b71e6 100644
--- a/When/README.md
+++ b/When/README.md
@@ -1,180 +1,68 @@
-##When
-
-**If you are considering using When, please use the [develop branch](https://github.com/tplaner/When/tree/develop) it will replace this branch when the documentation is complete, functionally it offers everything this version does, it supports PHP 5.3+.**
-
-Date/Calendar recursion library for PHP 5.2+
-
-Author: Thomas Planer
-
----
-###About
-After a comprehensive search I couldn't find a PHP library which could handle recursive dates.
-There is: [http://phpicalendar.org/][6] however it would have been extremely difficult to extract the recursion
-portion of the script from the application.
-
-Oddly, there are extremely good date recursion libraries for both Ruby and Python:
-
-Ruby: [http://github.com/seejohnrun/ice_cube][1]
-
-Python: [http://labix.org/python-dateutil][2]
-
-Since I couldn't find an equivalent for PHP I created [When][3].
-
----
-###Unit Tests
-
-Tests were written in PHPUnit ([http://www.phpunit.de/][4])
-
-Initial set of tests were created from the examples found within RFC5545 ([http://tools.ietf.org/html/rfc5545][5]).
-
------------------------------------
-###Documentation
-
-Initializing the class
-
-    $when = new When();
-
-Once you have initialized the class you can create a recurring event by calling on the recur method
-
-    $when->recur(<DateTime object|valid Date string>, <yearly|monthly|weekly|daily>);
-
-You can limit the number of dates to find by specifying a limit():
-
-	$when->limit(<int>);
-
-Alternatively you can specify an end date:
-
-	$when->until(<DateTime object|valid Date String>);
-
-Note: the end date does not have to match the recurring pattern.
-
-Note: the script will stop returning results when either the limit or the end date is met.
-
-More documentation to come, please take a look at the unit tests for an understanding of what the class is capable of.
-
----
-###Examples (take a look at the unit tests for more examples)
-
-The next 5 occurrences of Friday the 13th:
-
-	$r = new When();
-	$r->recur(new DateTime(), 'monthly')
-	  ->count(5)
-	  ->byday(array('FR'))
-	  ->bymonthday(array(13));
-
-	while($result = $r->next())
-	{
-		echo $result->format('c') . '<br />';
-	}
-
-Every four years, the first Tuesday after a Monday in November, for the next 20 years (U.S. Presidential Election day):
-
-	// this is the next election date
-	$start = new DateTime('2012-09-06');
-
-	$r = new When();
-	$r->recur($start, 'yearly')
-	  ->until($start->modify('+20 years'))
-	  ->interval(4)
-	  ->bymonth(array(11))
-	  ->byday(array('TU'))
-	  ->bymonthday(array(2,3,4,5,6,7,8));
-
-	while($result = $r->next())
-	{
-		echo $result->format('c') . '<br />';
-	}
-
-You can now pass raw RRULE's to the class:
-
-	$r = new When();
-	$r->recur('19970922T090000')->rrule('FREQ=MONTHLY;COUNT=6;BYDAY=-2MO');
-
-	while($result = $r->next())
-	{
-		echo $result->format('c') . '<br />';
-	}
-
-**Warnings:**
-
-* If you submit a pattern which has no results the script will loop infinitely.
-* If you do not specify an end date (until) or a count for your pattern you must limit the number of results within your script to avoid an infinite loop.
-
----
-###Contributing
-
-If you would like to contribute please create a fork and upon making changes submit a pull request.
-
-Please ensure 100% pass of unit tests before submitting a pull request.
-
-There are 78 tests, 1410 assertions currently.
-
-    >>>phpunit --verbose tests
-	PHPUnit 3.4.15 by Sebastian Bergmann.
-
-	tests
-	 When_Core_Tests
-	 ..
-
-	 When_Daily_Rrule_Test
-	 .....
-
-	 When_Daily_Test
-	 .....
-
-	 When_Iterator_Tests
-	 ..
-
-	 When_Monthly_Rrule_Test
-	 ..............
-
-	 When_Monthly_Test
-	 ..............
-
-	 When_Weekly_Rrule_Test
-	 ........
-
-	 When_Weekly_Test
-	 ........
-
-	 When_Rrule_Test
-	 ..........
-
-	 When_Yearly_Test
-	 ..........
-
-	Time: 2 seconds, Memory: 6.00Mb
-
-	OK (78 tests, 1410 assertions)
-
----
-###License
-
-Copyright (c) 2010 Thomas Planer
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
-
-
-  [1]: http://github.com/seejohnrun/ice_cube
-  [2]: http://labix.org/python-dateutil
-  [3]: http://github.com/tplaner/When
-  [4]: http://www.phpunit.de/
-  [5]: http://tools.ietf.org/html/rfc5545
-  [6]: http://phpicalendar.org/
+# When
+Date/Calendar recursion library for PHP 7.1+
+
+[![Build Status](https://img.shields.io/travis/tplaner/When/master.svg?style=flat-square)](https://travis-ci.org/tplaner/When)
+[![Total Downloads](https://img.shields.io/packagist/dt/tplaner/When.svg?style=flat-square)](https://packagist.org/packages/tplaner/When)
+
+Author: Tom Planer
+
+## Installation
+```
+composer require tplaner/When
+```
+
+## Current Features
+Currently this version does everything version 1 was capable of, it also supports `byhour`, `byminute`, and `bysecond`. Please check the [unit tests](https://github.com/tplaner/When/tree/develop/tests) for information about how to use it.
+
+Here are some basic examples.
+
+```php
+// friday the 13th for the next 5 occurrences
+$r = new When();
+$r->startDate(new DateTime("19980213T090000"))
+  ->freq("monthly")
+  ->count(5)
+  ->byday("fr")
+  ->bymonthday(13)
+  ->generateOccurrences();
+
+print_r($r->occurrences);
+```
+
+```php
+// friday the 13th for the next 5 occurrences rrule
+$r = new When();
+$r->startDate(new DateTime("19980213T090000"))
+  ->rrule("FREQ=MONTHLY;BYDAY=FR;BYMONTHDAY=13")
+  ->generateOccurrences();
+
+print_r($r->occurrences);
+```
+
+```php
+// friday the 13th for the next 5 occurrences, skipping known friday the 13ths
+$r = new When();
+$r->startDate(new DateTime("19980213T090000"))
+  ->freq("monthly")
+  ->count(5)
+  ->byday("fr")
+  ->bymonthday(13)
+  ->exclusions('19990813T090000,20001013T090000')
+  ->generateOccurrences();
+
+print_r($r->occurrences);
+```
+
+```php
+// friday the 13th forever; see which ones occur in 2018
+$r = new When();
+$r->startDate(new DateTime("19980213T090000"))
+  ->rrule("FREQ=MONTHLY;BYDAY=FR;BYMONTHDAY=13");
+
+$occurrences = $r->getOccurrencesBetween(new DateTime('2018-01-01 09:00:00'),
+                                         new DateTime('2019-01-01 09:00:00'));
+print_r($occurrences);
+```
+
+## License
+When is licensed under the MIT License, see `LICENSE` for specific details.
diff --git a/When/When.php b/When/When.php
deleted file mode 100644
index 2dc91a0..0000000
--- a/When/When.php
+++ /dev/null
@@ -1,755 +0,0 @@
-<?php
-/**
- * Name: When
- * Author: Thomas Planer <tplaner@gmail.com>
- * Location: http://github.com/tplaner/When
- * Created: September 2010
- * Description: Determines the next date of recursion given an iCalendar "rrule" like pattern.
- * Requirements: PHP 5.3+ - makes extensive use of the Date and Time library (http://us2.php.net/manual/en/book.datetime.php)
- */
-class When
-{
-	protected $frequency;
-
-	protected $start_date;
-	protected $try_date;
-
-	protected $end_date;
-
-	protected $gobymonth;
-	protected $bymonth;
-
-	protected $gobyweekno;
-	protected $byweekno;
-
-	protected $gobyyearday;
-	protected $byyearday;
-
-	protected $gobymonthday;
-	protected $bymonthday;
-
-	protected $gobyday;
-	protected $byday;
-
-	protected $gobysetpos;
-	protected $bysetpos;
-
-	protected $suggestions;
-
-	protected $count;
-	protected $counter;
-
-	protected $goenddate;
-
-	protected $interval;
-
-	protected $wkst;
-
-	protected $valid_week_days;
-	protected $valid_frequency;
-
-	protected $keep_first_month_day;
-
-	/**
-	 * __construct
-	 */
-	public function __construct()
-	{
-		$this->frequency = null;
-
-		$this->gobymonth = false;
-		$this->bymonth = range(1,12);
-
-		$this->gobymonthday = false;
-		$this->bymonthday = range(1,31);
-
-		$this->gobyday = false;
-		// setup the valid week days (0 = sunday)
-		$this->byday = range(0,6);
-
-		$this->gobyyearday = false;
-		$this->byyearday = range(0,366);
-
-		$this->gobysetpos = false;
-		$this->bysetpos = range(1,366);
-
-		$this->gobyweekno = false;
-		// setup the range for valid weeks
-		$this->byweekno = range(0,54);
-
-		$this->suggestions = array();
-
-		// this will be set if a count() is specified
-		$this->count = 0;
-		// how many *valid* results we returned
-		$this->counter = 0;
-
-		// max date we'll return
-		$this->end_date = new DateTime('9999-12-31');
-
-		// the interval to increase the pattern by
-		$this->interval = 1;
-
-		// what day does the week start on? (0 = sunday)
-		$this->wkst = 0;
-
-		$this->valid_week_days = array('SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA');
-
-		$this->valid_frequency = array('SECONDLY', 'MINUTELY', 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY');
-	}
-
-	/**
-	 * @param DateTime|string $start_date of the recursion - also is the first return value.
-	 * @param string $frequency of the recrusion, valid frequencies: secondly, minutely, hourly, daily, weekly, monthly, yearly
-	 */
-	public function recur($start_date, $frequency = "daily")
-	{
-		try
-		{
-			if(is_object($start_date))
-			{
-				$this->start_date = clone $start_date;
-			}
-			else
-			{
-				// timestamps within the RFC have a 'Z' at the end of them, remove this.
-				$start_date = trim($start_date, 'Z');
-				$this->start_date = new DateTime($start_date);
-			}
-
-			$this->try_date = clone $this->start_date;
-		}
-		catch(Exception $e)
-		{
-			throw new InvalidArgumentException('Invalid start date DateTime: ' . $e);
-		}
-
-		$this->freq($frequency);
-
-		return $this;
-	}
-
-	public function freq($frequency)
-	{
-		if(in_array(strtoupper($frequency), $this->valid_frequency))
-		{
-			$this->frequency = strtoupper($frequency);
-		}
-		else
-		{
-			throw new InvalidArgumentException('Invalid frequency type.');
-		}
-
-		return $this;
-	}
-
-	// accepts an rrule directly
-	public function rrule($rrule)
-	{
-		// strip off a trailing semi-colon
-		$rrule = trim($rrule, ";");
-
-		$parts = explode(";", $rrule);
-
-		foreach($parts as $part)
-		{
-			list($rule, $param) = explode("=", $part);
-
-			$rule = strtoupper($rule);
-			$param = strtoupper($param);
-
-			switch($rule)
-			{
-				case "FREQ":
-					$this->frequency = $param;
-					break;
-				case "UNTIL":
-					$this->until($param);
-					break;
-				case "COUNT":
-					$this->count($param);
-					$this->counter = 0;
-					break;
-				case "INTERVAL":
-					$this->interval($param);
-					break;
-				case "BYDAY":
-					$params = explode(",", $param);
-					$this->byday($params);
-					break;
-				case "BYMONTHDAY":
-					$params = explode(",", $param);
-					$this->bymonthday($params);
-					break;
-				case "BYYEARDAY":
-					$params = explode(",", $param);
-					$this->byyearday($params);
-					break;
-				case "BYWEEKNO":
-					$params = explode(",", $param);
-					$this->byweekno($params);
-					break;
-				case "BYMONTH":
-					$params = explode(",", $param);
-					$this->bymonth($params);
-					break;
-				case "BYSETPOS":
-					$params = explode(",", $param);
-					$this->bysetpos($params);
-					break;
-				case "WKST":
-					$this->wkst($param);
-					break;
-			}
-		}
-
-		return $this;
-	}
-
-	//max number of items to return based on the pattern
-	public function count($count)
-	{
-		$this->count = (int)$count;
-
-		return $this;
-	}
-
-	// how often the recurrence rule repeats
-	public function interval($interval)
-	{
-		$this->interval = (int)$interval;
-
-		return $this;
-	}
-
-	// starting day of the week
-	public function wkst($day)
-	{
-		switch($day)
-		{
-			case 'SU':
-				$this->wkst = 0;
-				break;
-			case 'MO':
-				$this->wkst = 1;
-				break;
-			case 'TU':
-				$this->wkst = 2;
-				break;
-			case 'WE':
-				$this->wkst = 3;
-				break;
-			case 'TH':
-				$this->wkst = 4;
-				break;
-			case 'FR':
-				$this->wkst = 5;
-				break;
-			case 'SA':
-				$this->wkst = 6;
-				break;
-		}
-
-		return $this;
-	}
-
-	// max date
-	public function until($end_date)
-	{
-		try
-		{
-			if(is_object($end_date))
-			{
-				$this->end_date = clone $end_date;
-			}
-			else
-			{
-				// timestamps within the RFC have a 'Z' at the end of them, remove this.
-				$end_date = trim($end_date, 'Z');
-				$this->end_date = new DateTime($end_date);
-			}
-		}
-		catch(Exception $e)
-		{
-			throw new InvalidArgumentException('Invalid end date DateTime: ' . $e);
-		}
-
-		return $this;
-	}
-
-	public function bymonth($months)
-	{
-		if(is_array($months))
-		{
-			$this->gobymonth = true;
-			$this->bymonth = $months;
-		}
-
-		return $this;
-	}
-
-	public function bymonthday($days)
-	{
-		if(is_array($days))
-		{
-			$this->gobymonthday = true;
-			$this->bymonthday = $days;
-		}
-
-		return $this;
-	}
-
-	public function byweekno($weeks)
-	{
-		$this->gobyweekno = true;
-
-		if(is_array($weeks))
-		{
-			$this->byweekno = $weeks;
-		}
-
-		return $this;
-	}
-
-	public function bysetpos($days)
-	{
-		$this->gobysetpos = true;
-
-		if(is_array($days))
-		{
-			$this->bysetpos = $days;
-		}
-
-		return $this;
-	}
-
-	public function byday($days)
-	{
-		$this->gobyday = true;
-
-		if(is_array($days))
-		{
-			$this->byday = array();
-			foreach($days as $day)
-			{
-				$len = strlen($day);
-
-				$as = '+';
-
-				// 0 mean no occurence is set
-				$occ = 0;
-
-				if($len == 3)
-				{
-					$occ = substr($day, 0, 1);
-				}
-				if($len == 4)
-				{
-					$as = substr($day, 0, 1);
-					$occ = substr($day, 1, 1);
-				}
-
-				if($as == '-')
-				{
-					$occ = '-' . $occ;
-				}
-				else
-				{
-					$occ = '+' . $occ;
-				}
-
-				$day = substr($day, -2, 2);
-				switch($day)
-				{
-					case 'SU':
-						$this->byday[] = $occ . 'SU';
-						break;
-					case 'MO':
-						$this->byday[] = $occ . 'MO';
-						break;
-					case 'TU':
-						$this->byday[] = $occ . 'TU';
-						break;
-					case 'WE':
-						$this->byday[] = $occ . 'WE';
-						break;
-					case 'TH':
-						$this->byday[] = $occ . 'TH';
-						break;
-					case 'FR':
-						$this->byday[] = $occ . 'FR';
-						break;
-					case 'SA':
-						$this->byday[] = $occ . 'SA';
-						break;
-				}
-			}
-		}
-
-		return $this;
-	}
-
-	public function byyearday($days)
-	{
-		$this->gobyyearday = true;
-
-		if(is_array($days))
-		{
-			$this->byyearday = $days;
-		}
-
-		return $this;
-	}
-
-	// this creates a basic list of dates to "try"
-	protected function create_suggestions()
-	{
-		switch($this->frequency)
-		{
-			case "YEARLY":
-				$interval = 'year';
-				break;
-			case "MONTHLY":
-				$interval = 'month';
-				break;
-			case "WEEKLY":
-				$interval = 'week';
-				break;
-			case "DAILY":
-				$interval = 'day';
-				break;
-			case "HOURLY":
-				$interval = 'hour';
-				break;
-			case "MINUTELY":
-				$interval = 'minute';
-				break;
-			case "SECONDLY":
-				$interval = 'second';
-				break;
-		}
-
-		$month_day = $this->try_date->format('j');
-		$month = $this->try_date->format('n');
-		$year = $this->try_date->format('Y');
-
-
-
-		$timestamp = $this->try_date->format('H:i:s');
-
-		if($this->gobysetpos)
-		{
-			if($this->try_date == $this->start_date)
-			{
-				$this->suggestions[] = clone $this->try_date;
-			}
-			else
-			{
-				if($this->gobyday)
-				{
-					foreach($this->bysetpos as $_pos)
-					{
-						$tmp_array = array();
-						$_mdays = range(1, date('t',mktime(0,0,0,$month,1,$year)));
-						foreach($_mdays as $_mday)
-						{
-							$date_time = new DateTime($year . '-' . $month . '-' . $_mday . ' ' . $timestamp);
-
-							$occur = ceil($_mday / 7);
-
-							$day_of_week = $date_time->format('l');
-							$dow_abr = strtoupper(substr($day_of_week, 0, 2));
-
-							// set the day of the month + (positive)
-							$occur = '+' . $occur . $dow_abr;
-							$occur_zero = '+0' . $dow_abr;
-
-							// set the day of the month - (negative)
-							$total_days = $date_time->format('t') - $date_time->format('j');
-							$occur_neg = '-' . ceil(($total_days + 1)/7) . $dow_abr;
-
-							$day_from_end_of_month = $date_time->format('t') + 1 - $_mday;
-
-							if(in_array($occur, $this->byday) || in_array($occur_zero, $this->byday) || in_array($occur_neg, $this->byday))
-							{
-								$tmp_array[] = clone $date_time;
-							}
-						}
-
-						if($_pos > 0)
-						{
-							$this->suggestions[] = clone $tmp_array[$_pos - 1];
-						}
-						else
-						{
-							$this->suggestions[] = clone $tmp_array[count($tmp_array) + $_pos];
-						}
-
-					}
-				}
-			}
-		}
-		elseif($this->gobyyearday)
-		{
-			foreach($this->byyearday as $_day)
-			{
-				if($_day >= 0)
-				{
-					$_day--;
-
-					$_time = strtotime('+' . $_day . ' days', mktime(0, 0, 0, 1, 1, $year));
-					$this->suggestions[] = new Datetime(date('Y-m-d', $_time) . ' ' . $timestamp);
-				}
-				else
-				{
-					$year_day_neg = 365 + $_day;
-					$leap_year = $this->try_date->format('L');
-					if($leap_year == 1)
-					{
-						$year_day_neg = 366 + $_day;
-					}
-
-					$_time = strtotime('+' . $year_day_neg . ' days', mktime(0, 0, 0, 1, 1, $year));
-					$this->suggestions[] = new Datetime(date('Y-m-d', $_time) . ' ' . $timestamp);
-				}
-			}
-		}
-		// special case because for years you need to loop through the months too
-		elseif($this->gobyday && $interval == "year")
-		{
-			foreach($this->bymonth as $_month)
-			{
-				// this creates an array of days of the month
-				$_mdays = range(1, date('t',mktime(0,0,0,$_month,1,$year)));
-				foreach($_mdays as $_mday)
-				{
-					$date_time = new DateTime($year . '-' . $_month . '-' . $_mday . ' ' . $timestamp);
-
-					// get the week of the month (1, 2, 3, 4, 5, etc)
-					$week = $date_time->format('W');
-
-					if($date_time >= $this->start_date && in_array($week, $this->byweekno))
-					{
-						$this->suggestions[] = clone $date_time;
-					}
-				}
-			}
-		}
-		elseif($interval == "day")
-		{
-			$this->suggestions[] = clone $this->try_date;
-		}
-		elseif($interval == "week")
-		{
-			$this->suggestions[] = clone $this->try_date;
-
-			if($this->gobyday)
-			{
-				$week_day = $this->try_date->format('w');
-
-				$days_in_month = $this->try_date->format('t');
-
-				$overflow_count = 1;
-				$_day = $month_day;
-
-				$run = true;
-				while($run)
-				{
-					$_day++;
-					if($_day <= $days_in_month)
-					{
-						$tmp_date = new DateTime($year . '-' . $month . '-' . $_day . ' ' . $timestamp);
-					}
-					else
-					{
-						//$tmp_month = $month+1;
-						$tmp_date = new DateTime($year . '-' . $month . '-' . $overflow_count . ' ' . $timestamp);
-						$tmp_date->modify('+1 month');
-						$overflow_count++;
-					}
-
-					$week_day = $tmp_date->format('w');
-
-					if($this->try_date == $this->start_date)
-					{
-						if($week_day == $this->wkst)
-						{
-							$this->try_date = clone $tmp_date;
-							$this->try_date->modify('-7 days');
-							$run = false;
-						}
-					}
-
-					if($week_day != $this->wkst)
-					{
-						$this->suggestions[] = clone $tmp_date;
-					}
-					else
-					{
-						$run = false;
-					}
-				}
-			}
-		}
-		elseif($this->gobyday || ($this->gobymonthday && $interval == "month"))
-		{
-			$_mdays = range(1, date('t',mktime(0,0,0,$month,1,$year)));
-			foreach($_mdays as $_mday)
-			{
-				$date_time = new DateTime($year . '-' . $month . '-' . $_mday . ' ' . $timestamp);
-				// get the week of the month (1, 2, 3, 4, 5, etc)
-				$week = $date_time->format('W');
-
-				if($date_time >= $this->start_date && in_array($week, $this->byweekno))
-				{
-					$this->suggestions[] = clone $date_time;
-				}
-			}
-		}
-		elseif($this->gobymonth)
-		{
-			foreach($this->bymonth as $_month)
-			{
-				$date_time = new DateTime($year . '-' . $_month . '-' . $month_day . ' ' . $timestamp);
-
-				if($date_time >= $this->start_date)
-				{
-					$this->suggestions[] = clone $date_time;
-				}
-			}
-		}
-		elseif($interval == "month")
-		{
-			// Keep track of the original day of the month that was used
-			if ($this->keep_first_month_day === null) {
-				$this->keep_first_month_day = $month_day;
-			}
-
-			$month_count = 1;
-			foreach($this->bymonth as $_month)
-			{
-				$date_time = new DateTime($year . '-' . $_month . '-' . $this->keep_first_month_day . ' ' . $timestamp);
-				if ($month_count == count($this->bymonth)) {
-					$this->try_date->modify('+1 year');
-				}
-
-				if($date_time >= $this->start_date)
-				{
-					$this->suggestions[] = clone $date_time;
-				}
-				$month_count++;
-			}
-		}
-		else
-		{
-			$this->suggestions[] = clone $this->try_date;
-		}
-
-		if($interval == "month")
-		{
-                        for ($i=0; $i< $this->interval; $i++)
-                        {
-                            $this->try_date->modify('+ 28 days');
-                            $this->try_date->setDate($this->try_date->format('Y'), $this->try_date->format('m'), $this->try_date->format('t'));
-                        }
-		}
-		else
-		{
-			$this->try_date->modify($this->interval . ' ' . $interval);
-		}
-	}
-
-	public function valid_date($date)
-	{
-		$year = $date->format('Y');
-		$month = $date->format('n');
-		$day = $date->format('j');
-
-		$year_day = $date->format('z') + 1;
-
-		$year_day_neg = -366 + $year_day;
-		$leap_year = $date->format('L');
-		if($leap_year == 1)
-		{
-			$year_day_neg = -367 + $year_day;
-		}
-
-		// this is the nth occurence of the date
-		$occur = ceil($day / 7);
-
-		$week = $date->format('W');
-
-		$day_of_week = $date->format('l');
-		$dow_abr = strtoupper(substr($day_of_week, 0, 2));
-
-		// set the day of the month + (positive)
-		$occur = '+' . $occur . $dow_abr;
-		$occur_zero = '+0' . $dow_abr;
-
-		// set the day of the month - (negative)
-		$total_days = $date->format('t') - $date->format('j');
-		$occur_neg = '-' . ceil(($total_days + 1)/7) . $dow_abr;
-
-		$day_from_end_of_month = $date->format('t') + 1 - $day;
-
-		if(in_array($month, $this->bymonth) &&
-		   (in_array($occur, $this->byday) || in_array($occur_zero, $this->byday) || in_array($occur_neg, $this->byday)) &&
-		   in_array($week, $this->byweekno) &&
-		   (in_array($day, $this->bymonthday) || in_array(-$day_from_end_of_month, $this->bymonthday)) &&
-		   (in_array($year_day, $this->byyearday) || in_array($year_day_neg, $this->byyearday)))
-		{
-			return true;
-		}
-		else
-		{
-			return false;
-		}
-	}
-
-	// return the next valid DateTime object which matches the pattern and follows the rules
-	public function next()
-	{
-		// check the counter is set
-		if($this->count !== 0)
-		{
-			if($this->counter >= $this->count)
-			{
-				return false;
-			}
-		}
-
-		// create initial set of suggested dates
-		if(count($this->suggestions) === 0)
-		{
-			$this->create_suggestions();
-		}
-
-		// loop through the suggested dates
-		while(count($this->suggestions) > 0)
-		{
-			// get the first one on the array
-			$try_date = array_shift($this->suggestions);
-
-			// make sure the date doesn't exceed the max date
-			if($try_date > $this->end_date)
-			{
-				return false;
-			}
-
-			// make sure it falls within the allowed days
-			if($this->valid_date($try_date) === true)
-			{
-				$this->counter++;
-				return $try_date;
-			}
-			else
-			{
-				// we might be out of suggested days, so load some more
-				if(count($this->suggestions) === 0)
-				{
-					$this->create_suggestions();
-				}
-			}
-		}
-	}
-}
diff --git a/When/When_Iterator.php b/When/When_Iterator.php
deleted file mode 100644
index d33c34e..0000000
--- a/When/When_Iterator.php
+++ /dev/null
@@ -1,112 +0,0 @@
-<?php
-/**
- * Name: When_Iterator
- * Author: Thomas Planer <tplaner@gmail.com>
- * Location: http://github.com/tplaner/When
- * Created: November 2010
- * Description: Implements PHP's Object Iteration Interface (http://us.php.net/Iterator & http://php.net/manual/en/class.iterator.php) so you can use the object within a foreach loop.
- * 
- * Thanks to Andrew Collington for suggesting the implementation of an Iterator and supplying the base code for it.
- */
-
-require_once('When.php');
-
-class When_Iterator extends When implements Iterator 
-{
-	// store the current position in the array
-	protected $position = 0;
-
-	// store an individual result if caching is disabled
-	protected $result;
-
-	// store all of the results
-	protected $results = array();
-
-	protected $cache = false;
-
-	// caching the results will cause the script to
-	// use more memory but less cpu (should also perform quicker)
-	// 
-	// results should always be the same regardless of cache
-	public function __construct($cache = false) 
-	{
-		parent::__construct();
-
-		$this->position = 0;
-		$this->results = array();
-		$this->cache = $cache;
-	}
-
-	public function rewind()
-	{
-		if($this->cache)
-		{
-			$this->position = 0;
-		}
-		else
-		{
-			// reset the counter and try_date in the parent class
-			$this->counter = 0;
-			$this->try_date = clone $this->start_date;
-		}
-	}
-
-	public function current()
-	{
-		if($this->cache === true)
-		{
-			return $this->results[$this->position];
-		}
-		else
-		{
-			return $this->result;
-		}
-	}
-
-	// only used if caching is enabled
-	public function key()
-	{
-		return $this->position;
-	}
-
-	// only used of caching is enabled
-	public function next()
-	{
-		++$this->position;
-	}
-
-	public function valid()
-	{
-		if($this->cache === true)
-		{
-			// check to see if the current position has already been stored
-			if(!empty($this->results[$this->position]))
-			{
-				return isset($this->results[$this->position]);
-			}
-			// if it hasn't been found, check to see if there are more dates
-			elseif($next_date = parent::next())
-			{
-				$this->results[] = $next_date;
-				return isset($next_date);
-			}
-		}
-		else
-		{
-			// check to see if there is another result and set that as the result
-			if($next_date = parent::next())
-			{
-				$this->result = $next_date;
-				return isset($this->result);
-			}
-		}
-
-		// end the foreach loop when all options are exhausted
-		return false;
-	}
-
-	public function enable_cache($cache)
-	{
-		$this->cache = $cache;
-	}
-}
diff --git a/When/composer.json b/When/composer.json
new file mode 100755
index 0000000..9789d13
--- /dev/null
+++ b/When/composer.json
@@ -0,0 +1,26 @@
+{
+    "name": "tplaner/when",
+    "type": "library",
+    "description": "Date/Calendar recursion library.",
+    "keywords": ["recurrence", "date", "time", "DateTime", "repeat"],
+    "homepage": "https://github.com/tplaner/When",
+    "license": "MIT",
+    "authors": [
+        {
+            "name": "Tom Planer",
+            "email": "tplaner@gmail.com"
+        }
+    ],
+    "require": {
+        "php": ">=7.1.3"
+    },
+    "require-dev": {
+        "phpunit/phpunit": "^7.0"
+    },
+    "autoload": {
+        "psr-4": {
+            "When\\": "src/"
+        }
+    },
+    "minimum-stability": "dev"
+}
diff --git a/When/phpunit.xml b/When/phpunit.xml
new file mode 100644
index 0000000..6886532
--- /dev/null
+++ b/When/phpunit.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<phpunit backupGlobals="false"
+         backupStaticAttributes="false"
+         bootstrap="vendor/autoload.php"
+         colors="true"
+         convertErrorsToExceptions="true"
+         convertNoticesToExceptions="true"
+         convertWarningsToExceptions="true"
+         processIsolation="false"
+         stopOnFailure="true">
+    <testsuites>
+        <testsuite name="When tests">
+            <directory>./tests/</directory>
+        </testsuite>
+    </testsuites>
+</phpunit>
diff --git a/When/src/Valid.php b/When/src/Valid.php
new file mode 100644
index 0000000..476a632
--- /dev/null
+++ b/When/src/Valid.php
@@ -0,0 +1,225 @@
+<?php
+
+namespace When;
+
+class Valid
+{
+    public static $frequencies = array(
+                                    'secondly', 'minutely', 'hourly',
+                                    'daily', 'weekly', 'monthly', 'yearly'
+                                );
+
+    public static  $weekDays = array('su', 'mo', 'tu', 'we', 'th', 'fr', 'sa');
+
+    /**
+     * Test if array of days is valid
+     *
+     * @param  array    $days
+     * @return bool
+     */
+    public static function daysList($days)
+    {
+        foreach($days as $day)
+        {
+            // if it isn't negative, it's positive
+            $day = ltrim($day, "+");
+            $day = trim($day);
+
+            $ordwk = 1;
+            $weekday = false;
+
+            if (strlen($day) === 2)
+            {
+                $weekday = $day;
+            }
+            else
+            {
+                list($ordwk, $weekday) = sscanf($day, "%d%s");
+            }
+
+            if (!self::weekDay($weekday) || !self::ordWk(abs($ordwk)))
+            {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    /**
+     * Test for valid itemsList
+     *
+     * @param  array    $items
+     * @param  string   $validator  Validator to use agains the list (second, minute, hour)
+     * @return bool
+     */
+    public static function itemsList($items, $validator)
+    {
+        foreach ($items as $item)
+        {
+            if (!self::$validator($item))
+            {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    public static function byFreqValid($freq, $byweeknos, $byyeardays, $bymonthdays)
+    {
+        if (isset($byweeknos) && $freq !== "yearly")
+        {
+            throw new InvalidCombination();
+        }
+
+        if (isset($byyeardays) && !in_array($freq, array("daily", "weekly", "monthly")))
+        {
+            throw new InvalidCombination();
+        }
+
+        if (isset($bymonthdays) && $freq === "weekly")
+        {
+            throw new InvalidCombination();
+        }
+
+        return true;
+    }
+
+    public static function yearDayNum($day)
+    {
+        return self::ordYrDay(abs($day));
+    }
+
+    public static function ordYrDay($ordyrday)
+    {
+        return ($ordyrday >= 1 && $ordyrday <= 366);
+    }
+
+    public static function monthDayNum($day)
+    {
+        return self::ordMoDay(abs($day));
+    }
+
+    public static function monthNum($month)
+    {
+        return ($month >= 1 && $month <= 12);
+    }
+
+    public static function setPosDay($day)
+    {
+        return self::yearDayNum($day);
+    }
+
+    /**
+     * Tests for valid ordMoDay
+     *
+     * @param  integer $ordmoday
+     * @return bool
+     */
+    public static function ordMoDay($ordmoday)
+    {
+        return ($ordmoday >= 1 && $ordmoday <= 31);
+    }
+
+    /**
+     * Test for a valid weekNum
+     *
+     * @param  integer $week
+     * @return bool
+     */
+    public static function weekNum($week)
+    {
+        return self::ordWk(abs($week));
+    }
+
+    /**
+     * Test for valid ordWk
+     *
+     * TODO: ensure this doesn't suffer from Y2K bug since there can be 54 weeks in a year
+     *
+     * @param  integer $ordwk
+     * @return bool
+     */
+    public static function ordWk($ordwk)
+    {
+        return ($ordwk >= 1 && $ordwk <= 53);
+    }
+
+    /**
+     * Test for valid hour
+     *
+     * @param  integer $hour
+     * @return bool
+     */
+    public static function hour($hour)
+    {
+        return ($hour >= 0 && $hour <= 23);
+    }
+
+    /**
+     * Test for valid minute
+     *
+     * @param  integer $minute
+     * @return bool
+     */
+    public static function minute($minute)
+    {
+        return ($minute >= 0 && $minute <= 59);
+    }
+
+    /**
+     * Test for valid second
+     *
+     * @param  integer $second
+     * @return bool
+     */
+    public static function second($second)
+    {
+        return ($second >= 0 && $second <= 60);
+    }
+
+    /**
+     * Test for valid weekDay
+     *
+     * @param  string $weekDay
+     * @return bool
+     */
+    public static function weekDay($weekDay)
+    {
+        return in_array(strtolower($weekDay), self::$weekDays);
+    }
+
+    /**
+     * Test for valid frequency
+     *
+     * @param  string $frequency
+     * @return bool
+     */
+    public static function freq($frequency)
+    {
+        return in_array(strtolower($frequency), self::$frequencies);
+    }
+
+    /**
+     * Test for valid DateTime object
+     *
+     * @param  DateTime $dateTime
+     * @return bool
+     */
+    public static function dateTimeObject($dateTime)
+    {
+        return (is_object($dateTime) && $dateTime instanceof \DateTime);
+    }
+    
+    /**
+     * Test for a list of valid DateTime objects
+     *
+     * @param  aray $dateTimes
+     * @return bool
+     */
+    public static function dateTimeList($dateTimes)
+    {
+        return is_array($dateTimes) && array_filter($dateTimes, [__CLASS__, 'dateTimeObject']);
+    }
+}
diff --git a/When/src/When.php b/When/src/When.php
new file mode 100644
index 0000000..47279eb
--- /dev/null
+++ b/When/src/When.php
@@ -0,0 +1,1156 @@
+<?php
+
+namespace When;
+
+use DateTime;
+use Exception;
+use DateInterval;
+use DateTimezone;
+use InvalidArgumentException;
+
+class When extends DateTime
+{
+    const EXCEPTION = 0;
+    const IGNORE = 2;
+
+    public $RFC5545_COMPLIANT = self::EXCEPTION;
+    public $startDate;
+    public $freq;
+    public $until;
+    public $count;
+    public $interval;
+    public $exclusions = [];
+
+    public $byseconds;
+    public $byminutes;
+    public $byhours;
+    public $bydays;
+    public $bymonthdays;
+    public $byyeardays;
+    public $byweeknos;
+    public $bymonths;
+    public $bysetpos;
+    public $wkst;
+
+    public $occurrences = [];
+    public $rangeLimit = 200;
+
+    public function __construct($time = "now", $timezone = NULL)
+    {
+        parent::__construct($time, $timezone);
+        $this->startDate = new DateTime($time, $timezone);
+    }
+
+    public function startDate($startDate)
+    {
+        if (Valid::dateTimeObject($startDate))
+        {
+            $this->startDate = clone $startDate;
+
+            return $this;
+        }
+
+        throw new InvalidArgumentException("startDate: Accepts valid DateTime objects");
+    }
+
+    public function freq($frequency)
+    {
+        if (Valid::freq($frequency))
+        {
+            $this->freq = strtolower($frequency);
+
+            return $this;
+        }
+
+        throw new InvalidArgumentException("freq: Accepts " . rtrim(implode(Valid::$frequencies, ", "), ","));
+    }
+
+    public function until($endDate)
+    {
+        if (Valid::dateTimeObject($endDate))
+        {
+            $this->until = clone $endDate;
+            return $this;
+        }
+
+        throw new InvalidArgumentException("until: Accepts valid DateTime objects");
+    }
+
+    public function count($count)
+    {
+        if (is_numeric($count))
+        {
+            $this->count = (int)$count;
+
+            return $this;
+        }
+
+        throw new InvalidArgumentException("count: Accepts numeric values");
+    }
+
+    public function interval($interval)
+    {
+        if (is_numeric($interval))
+        {
+            $this->interval = (int)$interval;
+
+            return $this;
+        }
+
+        throw new InvalidArgumentException("interval: Accepts numeric values");
+    }
+
+    public function bysecond($seconds, $delimiter = ",")
+    {
+        if ($this->byseconds = self::prepareItemsList($seconds, $delimiter, 'second'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("bysecond: Accepts numeric values between 0 and 60");
+    }
+
+    public function byminute($minutes, $delimiter = ",")
+    {
+        if ($this->byminutes = self::prepareItemsList($minutes, $delimiter, 'minute'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("byminute: Accepts numeric values between 0 and 59");
+    }
+
+    public function byhour($hours, $delimiter = ",")
+    {
+        if ($this->byhours = self::prepareItemsList($hours, $delimiter, 'hour'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("byhour: Accepts numeric values between 0 and 23");
+    }
+
+    public function byday($bywdaylist, $delimiter = ",")
+    {
+        if (is_string($bywdaylist) && strpos($bywdaylist, $delimiter) !== false)
+        {
+            // remove any accidental delimiters
+            $bywdaylist = trim($bywdaylist, $delimiter);
+
+            $bywdaylist = explode($delimiter, $bywdaylist);
+        } else if (is_string($bywdaylist))
+        {
+            // remove any accidental delimiters
+            $bywdaylist = trim($bywdaylist, $delimiter);
+
+            $bywdaylist = array($bywdaylist);
+        }
+
+        if (is_array($bywdaylist) && Valid::daysList($bywdaylist))
+        {
+            $this->bydays = self::createDaysList($bywdaylist);
+
+            return $this;
+        }
+
+        throw new InvalidArgumentException("bydays: Accepts (optional) positive and negative values between 1 and 53 followed by a valid week day");
+    }
+
+    public function exclusions($exclusionList, $delimiter = ",")
+    {
+        if (is_string($exclusionList))
+        {
+            if (strpos($exclusionList, $delimiter) !== false)
+            {
+                // remove any accidental delimiters
+                $exclusionList = trim($exclusionList, $delimiter);
+
+                $exclusionList = explode($delimiter, $exclusionList);
+            } else
+            {
+                // remove any accidental delimiters
+                $exclusionList = trim($exclusionList, $delimiter);
+
+                $exclusionList = array($exclusionList);
+            }
+
+            $exclusionList = array_map('date_create', $exclusionList);
+        }
+
+        if (is_array($exclusionList) && Valid::dateTimeList($exclusionList))
+        {
+            $this->exclusions = array_filter($exclusionList, ['When\Valid', 'dateTimeObject']);
+            return $this;
+        }
+        throw new InvalidArgumentException("exclusions: Accepts (optional) a array of date time objects or a string seperated by a specified delimiter.");
+    }
+
+    public function bymonthday($bymodaylist, $delimiter = ",")
+    {
+        if ($this->bymonthdays = self::prepareItemsList($bymodaylist, $delimiter, 'monthDayNum'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("bymonthday: Accepts positive and negative values between 1 and 31");
+    }
+
+    public function byyearday($byyrdaylist, $delimiter = ",")
+    {
+        if ($this->byyeardays = self::prepareItemsList($byyrdaylist, $delimiter, 'yearDayNum'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("byyearday: Accepts positive and negative values between 1 and 366");
+    }
+
+    public function byweekno($bywknolist, $delimiter = ",")
+    {
+        if ($this->byweeknos = self::prepareItemsList($bywknolist, $delimiter, 'weekNum'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("byweekno: Accepts positive and negative values between 1 and 53");
+    }
+
+    public function bymonth($bymolist, $delimiter = ",")
+    {
+        if ($this->bymonths = self::prepareItemsList($bymolist, $delimiter, 'monthNum'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("bymonth: Accepts values between 1 and 12");
+    }
+
+    public function bysetpos($bysplist, $delimiter = ",")
+    {
+        if ($this->bysetpos = self::prepareItemsList($bysplist, $delimiter, 'setPosDay'))
+        {
+            return $this;
+        }
+
+        throw new InvalidArgumentException("bysetpos: Accepts positive and negative values between 1 and 366");
+    }
+
+    public function wkst($weekDay)
+    {
+        if (Valid::weekDay($weekDay))
+        {
+            $this->wkst = strtolower($weekDay);
+
+            return $this;
+        }
+
+        throw new InvalidArgumentException("wkst: Accepts " . rtrim(implode(Valid::$weekDays, ", "), ","));
+    }
+
+    public function rrule($rrule)
+    {
+        // strip off a trailing semi-colon
+        $rrule = trim($rrule, ";");
+
+        $removeRruleString = "rrule:";
+        if (strpos(strtolower($rrule), $removeRruleString) === 0) {
+            $rrule = substr($rrule, strlen($removeRruleString));
+        }
+
+        $parts = explode(";", $rrule);
+
+        foreach ($parts as $part)
+        {
+            list($rule, $param) = explode("=", $part);
+
+            $rule = strtoupper($rule);
+            $param = strtoupper($param);
+
+            switch ($rule)
+            {
+                case "DTSTART":
+                    $this->startDate(new DateTime($param));
+                    break;
+                case "UNTIL":
+                    $this->until(new DateTime($param));
+                    break;
+                case "FREQ":
+                case "COUNT":
+                case "INTERVAL":
+                case "WKST":
+                    $this->{$rule}($param);
+                    break;
+                case "BYDAY":
+                case "BYMONTHDAY":
+                case "BYYEARDAY":
+                case "BYWEEKNO":
+                case "BYMONTH":
+                case "BYSETPOS":
+                case "BYHOUR":
+                case "BYMINUTE":
+                case "BYSECOND":
+                    $params = explode(",", $param);
+                    $this->{$rule}($params);
+                    break;
+            }
+        }
+
+        return $this;
+    }
+
+    public function occursOn(DateTime $date)
+    {
+        if (!Valid::dateTimeObject($date))
+        {
+            throw new InvalidArgumentException("occursOn: Accepts valid DateTime objects");
+        }
+
+        // breakdown the date
+        $year = $date->format('Y');
+        $month = $date->format('n');
+        $day = $date->format('j');
+        $dayFromEndOfMonth = -((int)$date->format('t') + 1 - (int)$day);
+
+        $leapYear = (int)$date->format('L');
+
+        $yearDay = $date->format('z') + 1;
+        $yearDayNeg = -366 + (int)$yearDay;
+        if ($leapYear)
+        {
+            $yearDayNeg = -367 + (int)$yearDay;
+        }
+
+        // this is the nth occurrence of the date
+        $occur = ceil($day / 7);
+        $occurNeg = -1 * ceil(abs($dayFromEndOfMonth) / 7);
+
+        // starting on a monday
+        $week = $date->format('W');
+        $weekDay = strtolower($date->format('D'));
+
+        $dayOfWeek = $date->format('l');
+        $dayOfWeekAbr = strtolower(substr($dayOfWeek, 0, 2));
+
+        // the date has to be greater then the start date
+        if ($date < $this->startDate)
+        {
+            return false;
+        }
+
+        // if the there is an end date, make sure date is under
+        if (isset($this->until))
+        {
+            if ($date > $this->until)
+            {
+                return false;
+            }
+        }
+
+        if (isset($this->bymonths))
+        {
+            if (!in_array($month, $this->bymonths))
+            {
+                return false;
+            }
+        }
+
+        if (isset($this->bydays))
+        {
+            if (!in_array(0 . $dayOfWeekAbr, $this->bydays) &&
+                !in_array($occur . $dayOfWeekAbr, $this->bydays) &&
+                !in_array($occurNeg . $dayOfWeekAbr, $this->bydays))
+            {
+                return false;
+            }
+        }
+
+        if (isset($this->byweeknos))
+        {
+            if (!in_array($week, $this->byweeknos))
+            {
+                return false;
+            }
+        }
+
+        if (isset($this->bymonthdays))
+        {
+            if (!in_array($day, $this->bymonthdays) &&
+                !in_array($dayFromEndOfMonth, $this->bymonthdays))
+            {
+                return false;
+            }
+        }
+
+        if (isset($this->byyeardays))
+        {
+            if (!in_array($yearDay, $this->byyeardays) &&
+                !in_array($yearDayNeg, $this->byyeardays))
+            {
+                return false;
+            }
+        }
+
+        // If there is an interval != 1, check whether this is an nth period.
+        if ($this->interval > 1)
+        {
+            switch ($this->freq)
+            {
+                case 'yearly':
+                    $start = new DateTime($this->startDate->format("Y-1-1\TH:i:sP"));
+                    $sinceStart = $date->diff($start);
+                    $numPeriods = $sinceStart->y;
+                    break;
+                case 'monthly':
+                    // Normalize to the first of the month, so patterns that land on nth weekday
+                    // aren't affected by the shift of the nth weekday back and forth by day of month.
+                    // Use UTC so timezone offset shifts don't cause fencepost errors.
+                    $utc = new DateTimezone("UTC");
+                    $start = new DateTime($this->startDate->format("Y-m-1\TH:i:s"), $utc);
+                    $dateMonthStart = new DateTime($date->format("Y-m-1\TH:i:s"), $utc);
+                    $sinceStart = $dateMonthStart->diff($start);
+                    $numYears = $sinceStart->y;
+                    $numMonths = $sinceStart->m;
+                    $numPeriods = ($numYears * 12) + $numMonths;
+                    break;
+                case 'weekly':
+                    if (isset($this->bydays))
+                    {
+                        $weekStartDate = self::getFirstWeekStartDate($this->startDate, $this->wkst);
+                    } else
+                    {
+                        $weekStartDate = $this->startDate;
+                    }
+                    $sinceStart = $date->diff($weekStartDate);
+                    $numPeriods = floor($sinceStart->days / 7);
+                    break;
+                case 'daily':
+                    $sinceStart = $date->diff($this->startDate); // Note we "expanded" startDate already.
+                    $numPeriods = $sinceStart->days;
+                    break;
+                case 'hourly':
+                    $sinceStart = $date->diff($this->startDate); // Note we "expanded" startDate already.
+                    $numDays = $sinceStart->days;
+                    $numHours = $sinceStart->h;
+                    $numPeriods = (24 * $numDays) + $numHours;
+                    break;
+                case 'minutely':
+                    $sinceStart = $date->diff($this->startDate); // Note we "expanded" startDate already.
+                    $numDays = $sinceStart->days;
+                    $numHours = $sinceStart->h;
+                    $numMinutes = $sinceStart->i;
+                    $numPeriods = (60 * ((24 * $numDays) + $numHours)) + $numMinutes;
+                    break;
+                case 'secondly':
+                    $sinceStart = $date->diff($this->startDate); // Note we "expanded" startDate already.
+                    $numDays = $sinceStart->days;
+                    $numHours = $sinceStart->h;
+                    $numMinutes = $sinceStart->i;
+                    $numSeconds = $sinceStart->s;
+                    $numPeriods = (60 * (60 * ((24 * $numDays) + $numHours)) + $numMinutes) + $numSeconds;
+                    break;
+            }
+            if (($numPeriods % $this->interval) == 0)
+            {
+                return true;
+            } else
+            {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    public function occursAt($date)
+    {
+        $hour = (int)$date->format('G');
+        $minute = (int)$date->format('i');
+        $second = (int)$date->format('s');
+
+        if (isset($this->byhours))
+        {
+            if (!in_array($hour, $this->byhours))
+            {
+                return false;
+            }
+        }
+
+        if (isset($this->byminutes))
+        {
+            if (!in_array($minute, $this->byminutes))
+            {
+                return false;
+            }
+        }
+
+        if (isset($this->byseconds))
+        {
+            if (!in_array($second, $this->byseconds))
+            {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    // Get occurrences between two DateTimes, exclusive. Does not modify $this.
+    public function getOccurrencesBetween($startDate, $endDate, $limit = NULL)
+    {
+
+        $thisClone = clone $this;
+
+        // Enforce consistent time zones. Date comparisons don't require them, but +P1D loop does.
+        if ($tz = $thisClone->getTimeZone())
+        {
+            $startDate->setTimeZone($tz);
+            $endDate->setTimeZone($tz);
+        }
+
+        $occurrences = [];
+
+        if ($endDate <= $startDate)
+        {
+            return $occurrences;
+        }
+
+        // if existing UNTIL < startDate - we have nothing
+        if (isset($thisClone->until) && $thisClone->until < $startDate)
+        {
+            return $occurrences;
+        } // prevent unnecessary leg-work - our endDate is our new UNTIL
+        elseif (!isset($thisClone->until))
+        {
+            $thisClone->until = $endDate;
+        }
+
+        $thisClone->generateOccurrences();
+        $all_occurrences = $thisClone->occurrences;
+
+        // nothing found in $thisClone->generateOccurrences();
+        if (empty($all_occurrences))
+        {
+            return $occurrences;
+        }
+
+        $last_occurrence = end($all_occurrences);
+
+        // if we've hit the rangeLimit, restart looking but start at this last_occurrence
+        if ($thisClone->rangeLimit == count($all_occurrences)
+            && $thisClone->startDate != $last_occurrence)
+        {
+            $thisClone->startDate = clone $last_occurrence;
+
+            if (isset($thisClone->limit))
+            {
+                $thisClone->limit = $thisClone->limit - 200;
+            }
+
+            // clear all occurrences before our start date
+            foreach ($thisClone->occurrences as $key => $occurrence)
+            {
+                if ($occurrence < $startDate)
+                {
+                    unset($thisClone->occurrences[$key]);
+                }
+            }
+
+            return $thisClone->getOccurrencesBetween($startDate, $endDate, $limit);
+        }
+
+        // if our last occurrence is is before our startDate, we have nothing
+        if ($last_occurrence < $startDate)
+        {
+            return $occurrences;
+        }
+
+        // we have something to report, so reset our array pointer
+        reset($all_occurrences);
+
+        $count = 0;
+
+        foreach ($all_occurrences as $occurrence)
+        {
+            // fastforward our pointer to where it's >= startDate
+            if ($occurrence < $startDate)
+            {
+                continue;
+            }
+            // if current occurence is past our endDate - we're done
+            if ($occurrence > $endDate)
+            {
+                break;
+            }
+            // if we reach getOccurrencesBetween()'s limit - we're done
+            if (NULL != $limit && ++$count > $limit)
+            {
+                break;
+            }
+
+            $occurrences[] = $occurrence;
+        }
+
+        return $occurrences;
+    }
+
+    private function findDateRangeOverlap($startDate, $endDate)
+    {
+        // Trim to the defined range of this When:
+        if ($this->startDate > $startDate)
+        {
+            $startDate = clone $this->startDate;
+        }
+        if ($this->until && ($this->until < $endDate))
+        {
+            $endDate = clone $this->until;
+        }
+        return array($startDate, $endDate);
+    }
+
+    private function countOccurrencesBefore($date)
+    {
+        return count($this->getOccurrencesBetween($this->startDate, $date));
+    }
+
+    private static function abbrevToDayName($abbrev)
+    {
+        $daynames = array('su' => 'Sunday',
+            'mo' => 'Monday',
+            'tu' => 'Tuesday',
+            'we' => 'Wednesday',
+            'th' => 'Thursday',
+            'fr' => 'Friday',
+            'sa' => 'Saturyday',
+        );
+        return $daynames[strtolower($abbrev)];
+    }
+
+    /**
+     * "The WKST rule part specifies the day on which the workweek starts. [...]
+     * This is significant when a WEEKLY "RRULE" has an interval greater than 1,
+     * and a BYDAY rule part is specified." -- RFC 5545
+     * See http://stackoverflow.com/questions/5750586/determining-occurrences-from-icalendar-rrule-that-expands
+     */
+    public static function getFirstWeekStartDate($startDate, $wkst)
+    {
+        $wkst = self::abbrevToDayName($wkst);
+        $startWeekDay = clone $startDate;
+
+        // Get first $wkst before or equal to $startDate
+        $startWeekDay->modify("next " . $wkst);
+        $startWeekDay->modify("last " . $wkst);
+
+        return $startWeekDay;
+    }
+
+    public function getNextOccurrence($occurDate, $strictly_after = true)
+    {
+        self::prepareDateElements(false);
+
+        if (!$strictly_after)
+        {
+            if ($this->occursOn($occurDate) && $this->occursAt($occurDate))
+            {
+                return $occurDate;
+            }
+        }
+
+        // Set an arbitrary end date, taking the 400Y advice from elsewhere in this module.
+        // TODO: do this in smaller chunks so we don't get a bunch of unneeded occurrences
+        $endDate = clone $occurDate;
+        $endDate->add(new DateInterval('P400Y'));
+        $candidates = $this->getOccurrencesBetween($occurDate, $endDate, 2);
+        foreach ($candidates as $candidate)
+        {
+            if (!$strictly_after)
+            {
+                return $candidate;
+            } elseif ($candidate > $occurDate)
+            {
+                return $candidate;
+            }
+        }
+        return false;
+    }
+
+    public function getPrevOccurrence($occurDate)
+    {
+        self::prepareDateElements(false);
+
+        $startDate = $this->startDate;
+        $candidates = $this->getOccurrencesBetween($startDate, $occurDate);
+        if (count($candidates))
+        {
+            $lastDate = array_pop($candidates);
+            if ($lastDate == $occurDate)
+            {
+                $lastDate = array_pop($candidates);
+            }
+            return $lastDate;
+        }
+        return false;
+    }
+
+    public function generateOccurrences()
+    {
+        self::prepareDateElements();
+
+        $count = 0;
+
+        $dateLooper = clone $this->startDate;
+
+        // add the start date to the list of occurrences
+        if ($this->occursOn($dateLooper))
+        {
+            $this->addOccurrence($this->generateTimeOccurrences($dateLooper));
+        } else
+        {
+            switch ($this->RFC5545_COMPLIANT)
+            {
+                case self::IGNORE:
+                    break;
+                case self::EXCEPTION:
+                default:
+                    throw new InvalidStartDate();
+                    break;
+            }
+        }
+
+        while ($dateLooper < $this->until && count($this->occurrences) < $this->count)
+        {
+            $occurrences = [];
+
+            if ($this->freq === "yearly")
+            {
+                if (isset($this->bymonths))
+                {
+                    foreach ($this->bymonths as $month)
+                    {
+                        if (isset($this->bydays))
+                        {
+                            $dateLooper->setDate($dateLooper->format("Y"), $month, 1);
+
+                            // get the number of days
+                            $totalDays = $dateLooper->format("t");
+                            $today = 0;
+
+                            while ($today < $totalDays)
+                            {
+                                if ($this->occursOn($dateLooper))
+                                {
+                                    $occurrences = array_merge($occurrences, $this->generateTimeOccurrences($dateLooper));
+                                }
+
+                                $dateLooper->add(new DateInterval('P1D'));
+                                $today++;
+                            }
+                        } else
+                        {
+                            $dateLooper->setDate($dateLooper->format("Y"), $month, $dateLooper->format("j"));
+
+                            if ($this->occursOn($dateLooper))
+                            {
+                                $occurrences = array_merge($occurrences, $this->generateTimeOccurrences($dateLooper));
+                            }
+                        }
+                    }
+                } else
+                {
+                    $dateLooper->setDate($dateLooper->format("Y"), 1, 1);
+
+                    $leapYear = (int)$dateLooper->format("L");
+                    if ($leapYear)
+                    {
+                        $days = 366;
+                    } else
+                    {
+                        $days = 365;
+                    }
+
+                    $day = 0;
+                    while ($day < $days)
+                    {
+                        if ($this->occursOn($dateLooper))
+                        {
+                            $occurrences = array_merge($occurrences, $this->generateTimeOccurrences($dateLooper));
+                        }
+                        $dateLooper->add(new DateInterval('P1D'));
+                        $day++;
+                    }
+                }
+
+                $occurrences = $this->prepareOccurrences($occurrences, $count);
+                $this->addOccurrence($occurrences);
+
+                $dateLooper = clone $this->startDate;
+                // if we are on feb 29th and we must jump a year, we end up on march 1st, so if the rule is to
+                // always go to the end of february we enforce that
+                $correctForLeap = ($dateLooper->format('m-d') === '02-29'
+                    && in_array('2', $this->bymonths, true)
+                    && in_array('-1', $this->bymonthdays, true));
+                $dateLooper->add(new DateInterval('P' . ($this->interval * ++$count) . 'Y'));
+                if ($correctForLeap)
+                {
+                    $dateLooper->modify('last day of february');
+                }
+            } else if ($this->freq === "monthly")
+            {
+                $days = (int)$dateLooper->format("t");
+
+                $day = (int)$dateLooper->format("j");
+
+                while ($day <= $days)
+                {
+                    if ($this->occursOn($dateLooper))
+                    {
+                        $occurrences = array_merge($occurrences, $this->generateTimeOccurrences($dateLooper));
+                    }
+
+                    $dateLooper->add(new DateInterval('P1D'));
+                    $day++;
+                }
+
+                $occurrences = $this->prepareOccurrences($occurrences, $count);
+                $this->addOccurrence($occurrences);
+
+                $dateLooper = clone $this->startDate;
+                $dateLooper->setDate($dateLooper->format("Y"), $dateLooper->format("n"), 1);
+                $dateLooper->add(new DateInterval('P' . ($this->interval * ++$count) . 'M'));
+            } else if ($this->freq === "weekly")
+            {
+                $dateLooper->setDate($dateLooper->format("Y"), $dateLooper->format("n"), $dateLooper->format("j"));
+
+                $wkst = self::abbrevToDayName($this->wkst);
+
+                $daysLeft = 7;
+
+                // not very happy with this
+                if ($count === 0)
+                {
+                    $startWeekDay = clone $this->startDate;
+                    $startWeekDay->modify("next " . $wkst);
+                    $startWeekDay->setTime($dateLooper->format('H'), $dateLooper->format('i'), $dateLooper->format('s'));
+
+                    $daysLeft = (int)$dateLooper->diff($startWeekDay)->format("%a");
+
+                    $startWeekDay->modify("last " . $wkst);
+                }
+
+                while ($daysLeft > 0)
+                {
+                    if ($this->occursOn($dateLooper))
+                    {
+                        $occurrences = array_merge($occurrences, $this->generateTimeOccurrences($dateLooper));
+                    }
+
+                    $dateLooper->add(new DateInterval('P1D'));
+                    $daysLeft--;
+                }
+
+                $occurrences = $this->prepareOccurrences($occurrences, $count);
+                $this->addOccurrence($occurrences);
+
+                $dateLooper = clone $this->startDate;
+                $dateLooper->setDate($startWeekDay->format("Y"), $startWeekDay->format("n"), $startWeekDay->format('j'));
+                $dateLooper->add(new DateInterval('P' . ($this->interval * (++$count * 7)) . 'D'));
+            } else if ($this->freq === "daily")
+            {
+                if ($this->occursOn($dateLooper))
+                {
+                    $this->addOccurrence($this->generateTimeOccurrences($dateLooper));
+                }
+
+                $dateLooper = clone $this->startDate;
+                $dateLooper->setDate($dateLooper->format("Y"), $dateLooper->format("n"), $dateLooper->format('j'));
+                $dateLooper->add(new DateInterval('P' . ($this->interval * ++$count) . 'D'));
+            } else if ($this->freq === "hourly")
+            {
+                $occurrence = [];
+                if ($this->occursOn($dateLooper))
+                {
+                    $occurrence[] = $dateLooper;
+                    $this->addOccurrence($occurrence);
+                }
+
+                $dateLooper = clone $this->startDate;
+                $dateLooper->add(new DateInterval('PT' . ($this->interval * ++$count) . 'H'));
+            } else if ($this->freq === "minutely")
+            {
+                $occurrence = [];
+                if ($this->occursOn($dateLooper))
+                {
+                    $occurrence[] = $dateLooper;
+                    $this->addOccurrence($occurrence);
+                }
+
+                $dateLooper = clone $this->startDate;
+                $dateLooper->add(new DateInterval('PT' . ($this->interval * ++$count) . 'M'));
+            } else if ($this->freq === "secondly")
+            {
+                $occurrence = [];
+                if ($this->occursOn($dateLooper))
+                {
+                    $occurrence[] = $dateLooper;
+                    $this->addOccurrence($occurrence);
+                }
+
+                $dateLooper = clone $this->startDate;
+                $dateLooper->add(new DateInterval('PT' . ($this->interval * ++$count) . 'S'));
+
+            }
+        }
+        // generateTimeOccurrences can overshoot $this->count, so trim:
+        if ($this->count && (count($this->occurrences) >= $this->count))
+        {
+            $this->occurrences = array_slice($this->occurrences, 0, $this->count);
+        }
+    }
+
+    protected function prepareOccurrences($occurrences, $count = 0)
+    {
+        if (isset($this->bysetpos))
+        {
+            $filtered_occurrences = [];
+
+            if ($count > 0)
+            {
+                $occurrenceCount = count($occurrences);
+
+                foreach ($this->bysetpos as $setpos)
+                {
+                    if ($setpos > 0 && isset($occurrences[$setpos - 1]))
+                    {
+                        $filtered_occurrences[] = $occurrences[$setpos - 1];
+                    } elseif (isset($occurrences[$occurrenceCount + $setpos]))
+                    {
+                        $filtered_occurrences[] = $occurrences[$occurrenceCount + $setpos];
+                    }
+                }
+            }
+
+            $occurrences = $filtered_occurrences;
+        }
+
+        return $occurrences;
+    }
+
+    protected function addOccurrence($occurrences)
+    {
+        foreach ($occurrences as $occurrence)
+        {
+            // make sure that this occurrence isn't already in the list
+            if (!in_array($occurrence, $this->occurrences) && (!count($this->exclusions) || !in_array($occurrence, $this->exclusions)))
+            {
+                $this->occurrences[] = $occurrence;
+            }
+        }
+    }
+
+    // not happy with this.
+    protected function generateTimeOccurrences($dateLooper)
+    {
+        $occurrences = [];
+
+        foreach ($this->byhours as $hour)
+        {
+            foreach ($this->byminutes as $minute)
+            {
+                foreach ($this->byseconds as $second)
+                {
+                    $occurrence = clone $dateLooper;
+                    $occurrence->setTime($hour, $minute, $second);
+                    $occurrences[] = $occurrence;
+                }
+            }
+        }
+
+        return $occurrences;
+    }
+
+    // If $limitRange is true, $this->count and $this->until will be set if not already set.
+    protected function prepareDateElements($limitRange = true)
+    {
+        // if the interval isn't set, set it.
+        if (!isset($this->interval))
+        {
+            $this->interval = 1;
+        }
+
+        // must have a frequency
+        if (!isset($this->freq) && Valid::byFreqValid($this->freq, $this->byweeknos, $this->byyeardays, $this->bymonthdays))
+        {
+            throw new FrequencyRequired();
+        }
+
+        if ($limitRange && !isset($this->count))
+        {
+            $this->count = $this->rangeLimit;
+        }
+
+        // "Similarly, if the BYMINUTE, BYHOUR, BYDAY,
+        // BYMONTHDAY, or BYMONTH rule part were missing, the appropriate
+        // minute, hour, day, or month would have been retrieved from the
+        // "DTSTART" property."
+
+        // if there is no startDate, make it now
+        if (!$this->startDate)
+        {
+            $this->startDate = new DateTime();
+        }
+
+        // the calendar repeats itself every 400 years, so if a date
+        // doesn't exist for 400 years, I don't think it will ever
+        // occur
+        if ($limitRange && !isset($this->until))
+        {
+            $this->until = new DateTime();
+            $this->until->add(new DateInterval('P400Y'));
+        }
+
+        if (!isset($this->byminutes))
+        {
+            $this->byminutes = array((int)$this->startDate->format('i'));
+        }
+
+        if (!isset($this->byhours))
+        {
+            $this->byhours = array((int)$this->startDate->format('G'));
+        }
+
+        if (!isset($this->byseconds))
+        {
+            $this->byseconds = array((int)$this->startDate->format('s'));
+        }
+
+        if (!isset($this->wkst))
+        {
+            $this->wkst = "mo";
+        }
+
+        /*if (!isset($this->bydays))
+        {
+            $dayOfWeek = $this->startDate->format('l');
+            $dayOfWeekAbr = strtolower(substr($dayOfWeek, 0, 2));
+            $this->bydays = array($dayOfWeekAbr);
+        }*/
+
+        if ($this->freq === "monthly")
+        {
+            if (!isset($this->bymonthdays) && !isset($this->bydays))
+            {
+                $this->bymonthdays = array((int)$this->startDate->format('j'));
+            }
+        }
+
+        if ($this->freq === "weekly")
+        {
+            if (!isset($this->bymonthdays) && !isset($this->bydays))
+            {
+                $dayOfWeek = $this->startDate->format('l');
+                $dayOfWeekAbr = strtolower(substr($dayOfWeek, 0, 2));
+                $this->bydays = array("0" . $dayOfWeekAbr);
+            }
+        }
+
+        if ($this->freq === "yearly")
+        {
+            if (!isset($this->bydays) &&
+                !isset($this->bymonths) &&
+                !isset($this->bymonthdays) &&
+                !isset($this->byyeardays) &&
+                !isset($this->byweeknos) &&
+                !isset($this->bysetpos))
+            {
+                $this->bymonth($this->startDate->format('n'));
+            }
+        }
+
+    }
+
+    protected static function createItemsList($list, $delimiter)
+    {
+        $items = explode($delimiter, $list);
+
+        return array_map('intval', $items);
+    }
+
+    protected static function prepareItemsList($items, $delimiter = ",", $validator = null)
+    {
+        $_items = false;
+
+        if (is_numeric($items))
+        {
+            $_items = array(intval($items));
+        }
+
+        if (is_string($items) && $_items === false)
+        {
+            // remove any accidental delimiters
+            $items = trim($items, $delimiter);
+
+            $_items = self::createItemsList($items, $delimiter);
+        }
+
+        if (is_array($items))
+        {
+            $_items = $items;
+        }
+
+        if (is_array($_items) && Valid::itemsList($_items, $validator))
+        {
+            return $_items;
+        }
+
+        return false;
+    }
+
+    protected static function createDaysList($days)
+    {
+        $_days = [];
+
+        foreach ($days as $day)
+        {
+            $day = ltrim($day, "+");
+            $day = trim($day);
+
+            $ordwk = 0;
+            $weekday = false;
+
+            if (strlen($day) === 2)
+            {
+                $weekday = $day;
+            } else
+            {
+                list($ordwk, $weekday) = sscanf($day, "%d%s");
+            }
+
+            $_days[] = $ordwk . strtolower($weekday);
+        }
+
+        return $_days;
+    }
+}
+
+class InvalidCombination extends Exception
+{
+    public function __construct($message = "Invalid combination.", $code = 0, Exception $previous = null)
+    {
+        parent::__construct($message, $code, $previous);
+    }
+}
+
+class FrequencyRequired extends Exception
+{
+    public function __construct($message = "You are required to set a frequency.", $code = 0, Exception $previous = null)
+    {
+        parent::__construct($message, $code, $previous);
+    }
+}
+
+class InvalidStartDate extends Exception
+{
+    public function __construct($message = "The start date must be the first occurrence.", $code = 0, Exception $previous = null)
+    {
+        parent::__construct($message, $code, $previous);
+    }
+}
diff --git a/When/tests/WhenCoreTest.php b/When/tests/WhenCoreTest.php
new file mode 100755
index 0000000..d8c41d0
--- /dev/null
+++ b/When/tests/WhenCoreTest.php
@@ -0,0 +1,731 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\InvalidStartDate;
+use When\When;
+
+class WhenCoreTest extends TestCase {
+
+    /*public function testValidDateString()
+    {
+        $test = new When();
+        $test->startDate('20121010');
+
+        $this->assertInstanceOf('DateTime', $test);
+    }*/
+
+    public function testInvalidDateString()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When();
+        $test->startDate('asdasd');
+    }
+
+    public function testValidStartDate()
+    {
+        $date = new DateTime();
+
+        $test = new When();
+        $test->startDate($date);
+
+        $this->assertEquals($test->startDate, $date);
+    }
+
+    public function testValidFreq()
+    {
+        $test = new When();
+        $test->freq("secondly");
+
+        $this->assertEquals($test->freq, "secondly");
+
+        // should be lower case
+        $test = new When();
+        $test->freq("HOURLY");
+
+        $this->assertEquals($test->freq, "hourly");
+    }
+
+    public function testInvalidFreq()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When();
+        $test->freq("monthy");
+    }
+
+    public function testInvalidStartDate()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When();
+        $test->startDate("test");
+    }
+
+    public function testValidUntil()
+    {
+        $date = new DateTime();
+
+        $test = new When();
+        $test->until($date);
+
+        $this->assertEquals($test->until, $date);
+    }
+
+    public function testInvalidUntil()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When();
+        $test->until("test");
+    }
+
+    public function testInvalidDateObject()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When();
+        $test->startDate(new WhenFakeObject);
+    }
+
+    /* it is important we have this working */
+    public function testZuluTimeString()
+    {
+        $test = new When();
+        $test->startDate(new DateTime("19970610T172345Z"));
+
+        $this->assertInstanceOf('DateTime', $test);
+    }
+
+    /*public function testPrepareList()
+    {
+        $method = new ReflectionMethod('When\\When', 'prepareList');
+        $method->setAccessible(true);
+
+        $response = array(1, 2, 3, 4);
+
+        $this->assertEquals($method::prepareList(1, 2, "3", 4), $response);
+    }*/
+
+    public function testValidWkst()
+    {
+        $test = new When;
+        $test->wkst('mo');
+
+        $this->assertEquals($test->wkst, 'mo');
+    }
+
+    public function testInvalidWkst()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->wkst('va');
+    }
+
+    public function testValidByMonthDay()
+    {
+        $test = new When;
+        $test->bymonthday(12);
+
+        $this->assertEquals($test->bymonthdays, array(12));
+
+        $test = new When;
+        $test->bymonthday(-12);
+
+        $this->assertEquals($test->bymonthdays, array(-12));
+
+        // sloppy input works
+        $test = new When;
+        $test->bymonthday('1, 2,3 ');
+
+        $this->assertEquals($test->bymonthdays, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->bymonthday('1, 2,-3 ,');
+
+        $this->assertEquals($test->bymonthdays, array(1, 2, -3));
+
+        $test = new When;
+        $test->bymonthday(array(-1, 2, 3));
+
+        $this->assertEquals($test->bymonthdays, array(-1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->bymonthday('1; 2; 3', ";");
+
+        $this->assertEquals($test->bymonthdays, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->bymonthday(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->bymonthdays, array(1, 2, 3));
+    }
+
+    public function testInvalidByMonthDay()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->bymonthday(32);
+    }
+
+    public function testValidByYearDay()
+    {
+        $test = new When;
+        $test->byyearday(12);
+
+        $this->assertEquals($test->byyeardays, array(12));
+
+        $test = new When;
+        $test->byyearday(-12);
+
+        $this->assertEquals($test->byyeardays, array(-12));
+
+        // sloppy input works
+        $test = new When;
+        $test->byyearday('1, 2,3 ');
+
+        $this->assertEquals($test->byyeardays, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->byyearday('1, 2,-3 ,');
+
+        $this->assertEquals($test->byyeardays, array(1, 2, -3));
+
+        $test = new When;
+        $test->byyearday(array(-1, 2, 3));
+
+        $this->assertEquals($test->byyeardays, array(-1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->byyearday('1; 2; 3', ";");
+
+        $this->assertEquals($test->byyeardays, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->byyearday(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->byyeardays, array(1, 2, 3));
+    }
+
+    public function testInvalidByYearDay()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->byyearday(367);
+    }
+
+    public function testValidByWeekNo()
+    {
+        $test = new When;
+        $test->byweekno(12);
+
+        $this->assertEquals($test->byweeknos, array(12));
+
+        $test = new When;
+        $test->byweekno(-12);
+
+        $this->assertEquals($test->byweeknos, array(-12));
+
+        // sloppy input works
+        $test = new When;
+        $test->byweekno('1, 2,3 ');
+
+        $this->assertEquals($test->byweeknos, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->byweekno('1, 2,-3 ,');
+
+        $this->assertEquals($test->byweeknos, array(1, 2, -3));
+
+        $test = new When;
+        $test->byweekno(array(-1, 2, 3));
+
+        $this->assertEquals($test->byweeknos, array(-1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->byweekno('1; 2; 3', ";");
+
+        $this->assertEquals($test->byweeknos, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->byweekno(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->byweeknos, array(1, 2, 3));
+    }
+
+    public function testInvalidByWeekNo()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->byweekno(55);
+    }
+
+    public function testValidByMonth()
+    {
+        $test = new When;
+        $test->bymonth(12);
+
+        $this->assertEquals($test->bymonths, array(12));
+
+        // sloppy input works
+        $test = new When;
+        $test->bymonth('1, 2,3 ');
+
+        $this->assertEquals($test->bymonths, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->bymonth('1, 2,3 ,');
+
+        $this->assertEquals($test->bymonths, array(1, 2, 3));
+
+        $test = new When;
+        $test->bymonth(array(1, 2, 3));
+
+        $this->assertEquals($test->bymonths, array(1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->bymonth('1; 2; 3', ";");
+
+        $this->assertEquals($test->bymonths, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->bymonth(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->bymonths, array(1, 2, 3));
+    }
+
+    public function testInvalidByMonth()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->bymonth(-1);
+    }
+
+    public function testValidBySetPos()
+    {
+        $test = new When;
+        $test->bysetpos(12);
+
+        $this->assertEquals($test->bysetpos, array(12));
+
+        $test = new When;
+        $test->bysetpos(-12);
+
+        $this->assertEquals($test->bysetpos, array(-12));
+
+        // sloppy input works
+        $test = new When;
+        $test->bysetpos('1, 2,3 ');
+
+        $this->assertEquals($test->bysetpos, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->bysetpos('1, 2,-3 ,');
+
+        $this->assertEquals($test->bysetpos, array(1, 2, -3));
+
+        $test = new When;
+        $test->bysetpos(array(-1, 2, 3));
+
+        $this->assertEquals($test->bysetpos, array(-1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->bysetpos('1; 2; 3', ";");
+
+        $this->assertEquals($test->bysetpos, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->bysetpos(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->bysetpos, array(1, 2, 3));
+    }
+
+    public function testInvalidBySetPos()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->bysetpos(367);
+    }
+
+    public function testValidExclusions()
+    {
+        $validDateTimes = array(
+            new DateTime('2019-01-01'),
+            new DateTime('2019-01-02')
+        );
+
+        //Verify exclusion list can be generated with a string
+        $test = new When;
+        $test->exclusions('2019-01-01');
+        $this->assertEquals($test->exclusions,array($validDateTimes[0]));
+
+        //Verify exclusion list with multiple values can be generated by a comma separate string
+        $test = new When;
+        $test->exclusions('2019-01-01, 2019-01-02');
+        $this->assertEquals($test->exclusions,array(
+                $validDateTimes[0],
+                $validDateTimes[1]
+        ));
+
+        //Verify exclusion list can be generated with multiple values separate by a custom delimiter
+        $test = new When;
+        $test->exclusions('2019-01-01|2019-01-02',"|");
+        $this->assertEquals($test->exclusions,array(
+                $validDateTimes[0],
+                $validDateTimes[1]
+        ));
+
+        //Verify exclusion list can be generated after trimming a single trailing delimiters
+        $test = new When;
+        $test->exclusions('2019-01-01,2019-01-02,,');
+        $this->assertEquals($test->exclusions,array(
+                $validDateTimes[0],
+                $validDateTimes[1]
+        ));
+
+        //Verify exclusion list can be generated after trimming a multiple trailing delimiters
+        $test = new When;
+        $test->exclusions('2019-01-01,2019-01-02,,,,');
+        $this->assertEquals($test->exclusions,array(
+                $validDateTimes[0],
+                $validDateTimes[1]
+        ));
+
+        //Verify exclusion list can be generated by passing in an array of date_times
+        $test = new When;
+        $test->exclusions(array($validDateTimes[0],$validDateTimes[1]));
+        $this->assertEquals($test->exclusions,array(
+                $validDateTimes[0],
+                $validDateTimes[1]
+        ));
+
+    }
+
+    public function testInvalidExclusions()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->exclusions('notDateStringOrArray');
+    }
+
+    public function testValidbyDay()
+    {
+        $test = new When;
+        $test->byday(array("+5MO", "-20MO", "31TU", "SA"));
+
+        $this->assertEquals($test->bydays, array("5mo", "-20mo", "31tu", "0sa"));
+
+        $test = new When;
+        $test->byday(array("+5mo", "-20MO", "31tU", "SA"));
+
+        $this->assertEquals($test->bydays, array("5mo", "-20mo", "31tu", "0sa"));
+
+        $test = new When;
+        $test->byday("+5mo, -10MO, 31tU, SA");
+
+        $this->assertEquals($test->bydays, array("5mo", "-10mo", "31tu", "0sa"));
+
+        // trailing delimeter
+        $test = new When;
+        $test->byday(", +5mo, -10MO, 31tU, SA,");
+
+        $this->assertEquals($test->bydays, array("5mo", "-10mo", "31tu", "0sa"));
+
+        // different delimeter
+        $test = new When;
+        $test->byday("+5mo; -10MO; 31tU; SA;", ";");
+
+        $this->assertEquals($test->bydays, array("5mo", "-10mo", "31tu", "0sa"));
+
+        $test = new When;
+        $test->byday("+5mo");
+
+        $this->assertEquals($test->bydays, array("5mo"));
+    }
+
+    public function testInvalidbyDay()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->byday(array("+5MO", "-20MO", "31TU", "-92SA"));
+    }
+
+    public function testValidByHour()
+    {
+        $test = new When;
+        $test->byhour(12);
+
+        $this->assertEquals($test->byhours, array(12));
+
+        // sloppy input works
+        $test = new When;
+        $test->byhour('1, 2,3 ');
+
+        $this->assertEquals($test->byhours, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->byhour('1, 2,3 ,');
+
+        $this->assertEquals($test->byhours, array(1, 2, 3));
+
+        $test = new When;
+        $test->byhour(array(1, 2, 3));
+
+        $this->assertEquals($test->byhours, array(1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->byhour('1; 2; 3', ";");
+
+        $this->assertEquals($test->byhours, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->byhour(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->byhours, array(1, 2, 3));
+    }
+
+    public function testInvalidByHourOne()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->byhour(24);
+    }
+
+    public function testInvalidByHourTwo()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->byhour('-1, -2');
+    }
+
+    public function testValidByMinute()
+    {
+        $test = new When;
+        $test->byminute(12);
+
+        $this->assertEquals($test->byminutes, array(12));
+
+        // sloppy input works
+        $test = new When;
+        $test->byminute('1, 2,3 ');
+
+        $this->assertEquals($test->byminutes, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->byminute('1, 2,3 ,');
+
+        $this->assertEquals($test->byminutes, array(1, 2, 3));
+
+        $test = new When;
+        $test->byminute(array(1, 2, 3));
+
+        $this->assertEquals($test->byminutes, array(1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->byminute('1; 2; 3', ";");
+
+        $this->assertEquals($test->byminutes, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->byminute(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->byminutes, array(1, 2, 3));
+    }
+
+    public function testInvalidByMinuteOne()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->byminute(65);
+    }
+
+    public function testInvalidByMinuteTwo()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->byminute('-1, -2');
+    }
+
+    public function testValidBySecond()
+    {
+        $test = new When;
+        $test->bysecond(12);
+
+        $this->assertEquals($test->byseconds, array(12));
+
+        // sloppy input works
+        $test = new When;
+        $test->bysecond('1, 2,3 ');
+
+        $this->assertEquals($test->byseconds, array(1, 2, 3));
+
+        // sloppier input works
+        $test = new When;
+        $test->bysecond('1, 2,3 ,');
+
+        $this->assertEquals($test->byseconds, array(1, 2, 3));
+
+        $test = new When;
+        $test->bysecond(array(1, 2, 3));
+
+        $this->assertEquals($test->byseconds, array(1, 2, 3));
+
+        // different delimeter
+        $test = new When;
+        $test->bysecond('1; 2; 3', ";");
+
+        $this->assertEquals($test->byseconds, array(1, 2, 3));
+
+        // different delimeter sloppy
+        $test = new When;
+        $test->bysecond(';1; 2; 3;', ";");
+
+        $this->assertEquals($test->byseconds, array(1, 2, 3));
+    }
+
+    public function testInvalidBySecondOne()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->bysecond(65);
+    }
+
+    public function testInvalidBySecondTwo()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->bysecond('-1, -2');
+    }
+
+    public function testValidInterval()
+    {
+        $test = new When;
+        $test->interval(20);
+
+        $this->assertEquals($test->interval, 20);
+
+        $test = new When;
+        $test->interval('20');
+
+        $this->assertEquals($test->interval, 20);
+    }
+
+    public function testInvalidInterval()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->interval('week');
+    }
+
+    public function testValidCount()
+    {
+        $test = new When;
+        $test->count(20);
+
+        $this->assertEquals($test->count, 20);
+
+        $test = new When;
+        $test->count('20');
+
+        $this->assertEquals($test->count, 20);
+    }
+
+    public function testInvalidCount()
+    {
+        $this->expectException(InvalidArgumentException::class);
+
+        $test = new When;
+        $test->count('weekly');
+    }
+
+    public function testGenerateOccurrencesErrorException()
+    {
+        $this->expectException(InvalidStartDate::class);
+
+        $test = new When;
+
+        $test->startDate(new DateTime("19970905T090000"))
+            ->rrule("FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3")
+            ->generateOccurrences();
+    }
+
+    public function testGenerateOccurrencesErrorIgnored()
+    {
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-11-06 09:00:00');
+
+        $test = new When;
+
+        $test->RFC5545_COMPLIANT = When::IGNORE;
+
+        $test->startDate(new DateTime("19970905T090000"))
+            ->rrule("FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3")
+            ->generateOccurrences();
+
+        $occurrences = $test->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    public function testIgnoreRrulePrefix()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-12 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+            ->rrule("RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5")
+            ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+}
+
+class WhenFakeObject {}
diff --git a/When/tests/WhenDailyRruleTest.php b/When/tests/WhenDailyRruleTest.php
new file mode 100755
index 0000000..2d39638
--- /dev/null
+++ b/When/tests/WhenDailyRruleTest.php
@@ -0,0 +1,382 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenDailyRruleTest extends TestCase
+{
+    /**
+     * Daily for 10 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;COUNT=10
+     */
+    function testDailyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-03 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-09-06 09:00:00');
+        $results[] = new DateTime('1997-09-07 09:00:00');
+        $results[] = new DateTime('1997-09-08 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=DAILY;COUNT=10")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Daily until December 24, 1997:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;UNTIL=19971224T000000Z
+     */
+    function testDailyTwo()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-03 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-09-06 09:00:00');
+        $results[] = new DateTime('1997-09-07 09:00:00');
+        $results[] = new DateTime('1997-09-08 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-13 09:00:00');
+        $results[] = new DateTime('1997-09-14 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-17 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-19 09:00:00');
+        $results[] = new DateTime('1997-09-20 09:00:00');
+        $results[] = new DateTime('1997-09-21 09:00:00');
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-24 09:00:00');
+        $results[] = new DateTime('1997-09-25 09:00:00');
+        $results[] = new DateTime('1997-09-26 09:00:00');
+        $results[] = new DateTime('1997-09-27 09:00:00');
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-09-29 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-01 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-10-04 09:00:00');
+        $results[] = new DateTime('1997-10-05 09:00:00');
+        $results[] = new DateTime('1997-10-06 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-08 09:00:00');
+        $results[] = new DateTime('1997-10-09 09:00:00');
+        $results[] = new DateTime('1997-10-10 09:00:00');
+        $results[] = new DateTime('1997-10-11 09:00:00');
+        $results[] = new DateTime('1997-10-12 09:00:00');
+        $results[] = new DateTime('1997-10-13 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-15 09:00:00');
+        $results[] = new DateTime('1997-10-16 09:00:00');
+        $results[] = new DateTime('1997-10-17 09:00:00');
+        $results[] = new DateTime('1997-10-18 09:00:00');
+        $results[] = new DateTime('1997-10-19 09:00:00');
+        $results[] = new DateTime('1997-10-20 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-22 09:00:00');
+        $results[] = new DateTime('1997-10-23 09:00:00');
+        $results[] = new DateTime('1997-10-24 09:00:00');
+        $results[] = new DateTime('1997-10-25 09:00:00');
+        $results[] = new DateTime('1997-10-26 09:00:00');
+        $results[] = new DateTime('1997-10-27 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-10-29 09:00:00');
+        $results[] = new DateTime('1997-10-30 09:00:00');
+        $results[] = new DateTime('1997-10-31 09:00:00');
+        $results[] = new DateTime('1997-11-01 09:00:00');
+        $results[] = new DateTime('1997-11-02 09:00:00');
+        $results[] = new DateTime('1997-11-03 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+        $results[] = new DateTime('1997-11-05 09:00:00');
+        $results[] = new DateTime('1997-11-06 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-11-08 09:00:00');
+        $results[] = new DateTime('1997-11-09 09:00:00');
+        $results[] = new DateTime('1997-11-10 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-12 09:00:00');
+        $results[] = new DateTime('1997-11-13 09:00:00');
+        $results[] = new DateTime('1997-11-14 09:00:00');
+        $results[] = new DateTime('1997-11-15 09:00:00');
+        $results[] = new DateTime('1997-11-16 09:00:00');
+        $results[] = new DateTime('1997-11-17 09:00:00');
+        $results[] = new DateTime('1997-11-18 09:00:00');
+        $results[] = new DateTime('1997-11-19 09:00:00');
+        $results[] = new DateTime('1997-11-20 09:00:00');
+        $results[] = new DateTime('1997-11-21 09:00:00');
+        $results[] = new DateTime('1997-11-22 09:00:00');
+        $results[] = new DateTime('1997-11-23 09:00:00');
+        $results[] = new DateTime('1997-11-24 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-11-26 09:00:00');
+        $results[] = new DateTime('1997-11-27 09:00:00');
+        $results[] = new DateTime('1997-11-28 09:00:00');
+        $results[] = new DateTime('1997-11-29 09:00:00');
+        $results[] = new DateTime('1997-11-30 09:00:00');
+        $results[] = new DateTime('1997-12-01 09:00:00');
+        $results[] = new DateTime('1997-12-02 09:00:00');
+        $results[] = new DateTime('1997-12-03 09:00:00');
+        $results[] = new DateTime('1997-12-04 09:00:00');
+        $results[] = new DateTime('1997-12-05 09:00:00');
+        $results[] = new DateTime('1997-12-06 09:00:00');
+        $results[] = new DateTime('1997-12-07 09:00:00');
+        $results[] = new DateTime('1997-12-08 09:00:00');
+        $results[] = new DateTime('1997-12-09 09:00:00');
+        $results[] = new DateTime('1997-12-10 09:00:00');
+        $results[] = new DateTime('1997-12-11 09:00:00');
+        $results[] = new DateTime('1997-12-12 09:00:00');
+        $results[] = new DateTime('1997-12-13 09:00:00');
+        $results[] = new DateTime('1997-12-14 09:00:00');
+        $results[] = new DateTime('1997-12-15 09:00:00');
+        $results[] = new DateTime('1997-12-16 09:00:00');
+        $results[] = new DateTime('1997-12-17 09:00:00');
+        $results[] = new DateTime('1997-12-18 09:00:00');
+        $results[] = new DateTime('1997-12-19 09:00:00');
+        $results[] = new DateTime('1997-12-20 09:00:00');
+        $results[] = new DateTime('1997-12-21 09:00:00');
+        $results[] = new DateTime('1997-12-22 09:00:00');
+        $results[] = new DateTime('1997-12-23 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=DAILY;UNTIL=19971224T000000Z")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other day - forever:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;INTERVAL=2
+     */
+    function testDailyThree()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-06 09:00:00');
+        $results[] = new DateTime('1997-09-08 09:00:00');
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-14 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-20 09:00:00');
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-09-24 09:00:00');
+        $results[] = new DateTime('1997-09-26 09:00:00');
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-04 09:00:00');
+        $results[] = new DateTime('1997-10-06 09:00:00');
+        $results[] = new DateTime('1997-10-08 09:00:00');
+        $results[] = new DateTime('1997-10-10 09:00:00');
+        $results[] = new DateTime('1997-10-12 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-16 09:00:00');
+        $results[] = new DateTime('1997-10-18 09:00:00');
+        $results[] = new DateTime('1997-10-20 09:00:00');
+        $results[] = new DateTime('1997-10-22 09:00:00');
+        $results[] = new DateTime('1997-10-24 09:00:00');
+        $results[] = new DateTime('1997-10-26 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-10-30 09:00:00');
+        $results[] = new DateTime('1997-11-01 09:00:00');
+        $results[] = new DateTime('1997-11-03 09:00:00');
+        $results[] = new DateTime('1997-11-05 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-11-09 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-13 09:00:00');
+        $results[] = new DateTime('1997-11-15 09:00:00');
+        $results[] = new DateTime('1997-11-17 09:00:00');
+        $results[] = new DateTime('1997-11-19 09:00:00');
+        $results[] = new DateTime('1997-11-21 09:00:00');
+        $results[] = new DateTime('1997-11-23 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-11-27 09:00:00');
+        $results[] = new DateTime('1997-11-29 09:00:00');
+        $results[] = new DateTime('1997-12-01 09:00:00');
+        $results[] = new DateTime('1997-12-03 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=DAILY;INTERVAL=2")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 10 days, 5 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5
+     */
+    function testDailyFour()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-12 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=DAILY;INTERVAL=10;COUNT=5")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * TODO: I think there might be an issue with timezone here
+     *
+     * Every day in January, for 3 years:
+     * DTSTART;TZID=America/New_York:19980101T090000
+     * RRULE:FREQ=DAILY;UNTIL=20000131T140000Z;BYMONTH=1
+     */
+    function testDailyFive()
+    {
+        $results[] = new DateTime('1998-01-01 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-01-03 09:00:00');
+        $results[] = new DateTime('1998-01-04 09:00:00');
+        $results[] = new DateTime('1998-01-05 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-07 09:00:00');
+        $results[] = new DateTime('1998-01-08 09:00:00');
+        $results[] = new DateTime('1998-01-09 09:00:00');
+        $results[] = new DateTime('1998-01-10 09:00:00');
+        $results[] = new DateTime('1998-01-11 09:00:00');
+        $results[] = new DateTime('1998-01-12 09:00:00');
+        $results[] = new DateTime('1998-01-13 09:00:00');
+        $results[] = new DateTime('1998-01-14 09:00:00');
+        $results[] = new DateTime('1998-01-15 09:00:00');
+        $results[] = new DateTime('1998-01-16 09:00:00');
+        $results[] = new DateTime('1998-01-17 09:00:00');
+        $results[] = new DateTime('1998-01-18 09:00:00');
+        $results[] = new DateTime('1998-01-19 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-01-21 09:00:00');
+        $results[] = new DateTime('1998-01-22 09:00:00');
+        $results[] = new DateTime('1998-01-23 09:00:00');
+        $results[] = new DateTime('1998-01-24 09:00:00');
+        $results[] = new DateTime('1998-01-25 09:00:00');
+        $results[] = new DateTime('1998-01-26 09:00:00');
+        $results[] = new DateTime('1998-01-27 09:00:00');
+        $results[] = new DateTime('1998-01-28 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-01-30 09:00:00');
+        $results[] = new DateTime('1998-01-31 09:00:00');
+        $results[] = new DateTime('1999-01-01 09:00:00');
+        $results[] = new DateTime('1999-01-02 09:00:00');
+        $results[] = new DateTime('1999-01-03 09:00:00');
+        $results[] = new DateTime('1999-01-04 09:00:00');
+        $results[] = new DateTime('1999-01-05 09:00:00');
+        $results[] = new DateTime('1999-01-06 09:00:00');
+        $results[] = new DateTime('1999-01-07 09:00:00');
+        $results[] = new DateTime('1999-01-08 09:00:00');
+        $results[] = new DateTime('1999-01-09 09:00:00');
+        $results[] = new DateTime('1999-01-10 09:00:00');
+        $results[] = new DateTime('1999-01-11 09:00:00');
+        $results[] = new DateTime('1999-01-12 09:00:00');
+        $results[] = new DateTime('1999-01-13 09:00:00');
+        $results[] = new DateTime('1999-01-14 09:00:00');
+        $results[] = new DateTime('1999-01-15 09:00:00');
+        $results[] = new DateTime('1999-01-16 09:00:00');
+        $results[] = new DateTime('1999-01-17 09:00:00');
+        $results[] = new DateTime('1999-01-18 09:00:00');
+        $results[] = new DateTime('1999-01-19 09:00:00');
+        $results[] = new DateTime('1999-01-20 09:00:00');
+        $results[] = new DateTime('1999-01-21 09:00:00');
+        $results[] = new DateTime('1999-01-22 09:00:00');
+        $results[] = new DateTime('1999-01-23 09:00:00');
+        $results[] = new DateTime('1999-01-24 09:00:00');
+        $results[] = new DateTime('1999-01-25 09:00:00');
+        $results[] = new DateTime('1999-01-26 09:00:00');
+        $results[] = new DateTime('1999-01-27 09:00:00');
+        $results[] = new DateTime('1999-01-28 09:00:00');
+        $results[] = new DateTime('1999-01-29 09:00:00');
+        $results[] = new DateTime('1999-01-30 09:00:00');
+        $results[] = new DateTime('1999-01-31 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-01-02 09:00:00');
+        $results[] = new DateTime('2000-01-03 09:00:00');
+        $results[] = new DateTime('2000-01-04 09:00:00');
+        $results[] = new DateTime('2000-01-05 09:00:00');
+        $results[] = new DateTime('2000-01-06 09:00:00');
+        $results[] = new DateTime('2000-01-07 09:00:00');
+        $results[] = new DateTime('2000-01-08 09:00:00');
+        $results[] = new DateTime('2000-01-09 09:00:00');
+        $results[] = new DateTime('2000-01-10 09:00:00');
+        $results[] = new DateTime('2000-01-11 09:00:00');
+        $results[] = new DateTime('2000-01-12 09:00:00');
+        $results[] = new DateTime('2000-01-13 09:00:00');
+        $results[] = new DateTime('2000-01-14 09:00:00');
+        $results[] = new DateTime('2000-01-15 09:00:00');
+        $results[] = new DateTime('2000-01-16 09:00:00');
+        $results[] = new DateTime('2000-01-17 09:00:00');
+        $results[] = new DateTime('2000-01-18 09:00:00');
+        $results[] = new DateTime('2000-01-19 09:00:00');
+        $results[] = new DateTime('2000-01-20 09:00:00');
+        $results[] = new DateTime('2000-01-21 09:00:00');
+        $results[] = new DateTime('2000-01-22 09:00:00');
+        $results[] = new DateTime('2000-01-23 09:00:00');
+        $results[] = new DateTime('2000-01-24 09:00:00');
+        $results[] = new DateTime('2000-01-25 09:00:00');
+        $results[] = new DateTime('2000-01-26 09:00:00');
+        $results[] = new DateTime('2000-01-27 09:00:00');
+        $results[] = new DateTime('2000-01-28 09:00:00');
+        $results[] = new DateTime('2000-01-29 09:00:00');
+        $results[] = new DateTime('2000-01-30 09:00:00');
+        $results[] = new DateTime('2000-01-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19980101T090000"))
+          ->rrule("FREQ=DAILY;UNTIL=20000131T140000;BYMONTH=1")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+}
diff --git a/When/tests/WhenDailyTest.php b/When/tests/WhenDailyTest.php
new file mode 100755
index 0000000..3dc9e54
--- /dev/null
+++ b/When/tests/WhenDailyTest.php
@@ -0,0 +1,388 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenDailyTest extends TestCase
+{
+    /**
+     * Daily for 10 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;COUNT=10
+     */
+    function testDailyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-03 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-09-06 09:00:00');
+        $results[] = new DateTime('1997-09-07 09:00:00');
+        $results[] = new DateTime('1997-09-08 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("daily")
+          ->count(10)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Daily until December 24, 1997:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;UNTIL=19971224T000000Z
+     */
+    function testDailyTwo()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-03 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-09-06 09:00:00');
+        $results[] = new DateTime('1997-09-07 09:00:00');
+        $results[] = new DateTime('1997-09-08 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-13 09:00:00');
+        $results[] = new DateTime('1997-09-14 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-17 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-19 09:00:00');
+        $results[] = new DateTime('1997-09-20 09:00:00');
+        $results[] = new DateTime('1997-09-21 09:00:00');
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-24 09:00:00');
+        $results[] = new DateTime('1997-09-25 09:00:00');
+        $results[] = new DateTime('1997-09-26 09:00:00');
+        $results[] = new DateTime('1997-09-27 09:00:00');
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-09-29 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-01 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-10-04 09:00:00');
+        $results[] = new DateTime('1997-10-05 09:00:00');
+        $results[] = new DateTime('1997-10-06 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-08 09:00:00');
+        $results[] = new DateTime('1997-10-09 09:00:00');
+        $results[] = new DateTime('1997-10-10 09:00:00');
+        $results[] = new DateTime('1997-10-11 09:00:00');
+        $results[] = new DateTime('1997-10-12 09:00:00');
+        $results[] = new DateTime('1997-10-13 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-15 09:00:00');
+        $results[] = new DateTime('1997-10-16 09:00:00');
+        $results[] = new DateTime('1997-10-17 09:00:00');
+        $results[] = new DateTime('1997-10-18 09:00:00');
+        $results[] = new DateTime('1997-10-19 09:00:00');
+        $results[] = new DateTime('1997-10-20 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-22 09:00:00');
+        $results[] = new DateTime('1997-10-23 09:00:00');
+        $results[] = new DateTime('1997-10-24 09:00:00');
+        $results[] = new DateTime('1997-10-25 09:00:00');
+        $results[] = new DateTime('1997-10-26 09:00:00');
+        $results[] = new DateTime('1997-10-27 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-10-29 09:00:00');
+        $results[] = new DateTime('1997-10-30 09:00:00');
+        $results[] = new DateTime('1997-10-31 09:00:00');
+        $results[] = new DateTime('1997-11-01 09:00:00');
+        $results[] = new DateTime('1997-11-02 09:00:00');
+        $results[] = new DateTime('1997-11-03 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+        $results[] = new DateTime('1997-11-05 09:00:00');
+        $results[] = new DateTime('1997-11-06 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-11-08 09:00:00');
+        $results[] = new DateTime('1997-11-09 09:00:00');
+        $results[] = new DateTime('1997-11-10 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-12 09:00:00');
+        $results[] = new DateTime('1997-11-13 09:00:00');
+        $results[] = new DateTime('1997-11-14 09:00:00');
+        $results[] = new DateTime('1997-11-15 09:00:00');
+        $results[] = new DateTime('1997-11-16 09:00:00');
+        $results[] = new DateTime('1997-11-17 09:00:00');
+        $results[] = new DateTime('1997-11-18 09:00:00');
+        $results[] = new DateTime('1997-11-19 09:00:00');
+        $results[] = new DateTime('1997-11-20 09:00:00');
+        $results[] = new DateTime('1997-11-21 09:00:00');
+        $results[] = new DateTime('1997-11-22 09:00:00');
+        $results[] = new DateTime('1997-11-23 09:00:00');
+        $results[] = new DateTime('1997-11-24 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-11-26 09:00:00');
+        $results[] = new DateTime('1997-11-27 09:00:00');
+        $results[] = new DateTime('1997-11-28 09:00:00');
+        $results[] = new DateTime('1997-11-29 09:00:00');
+        $results[] = new DateTime('1997-11-30 09:00:00');
+        $results[] = new DateTime('1997-12-01 09:00:00');
+        $results[] = new DateTime('1997-12-02 09:00:00');
+        $results[] = new DateTime('1997-12-03 09:00:00');
+        $results[] = new DateTime('1997-12-04 09:00:00');
+        $results[] = new DateTime('1997-12-05 09:00:00');
+        $results[] = new DateTime('1997-12-06 09:00:00');
+        $results[] = new DateTime('1997-12-07 09:00:00');
+        $results[] = new DateTime('1997-12-08 09:00:00');
+        $results[] = new DateTime('1997-12-09 09:00:00');
+        $results[] = new DateTime('1997-12-10 09:00:00');
+        $results[] = new DateTime('1997-12-11 09:00:00');
+        $results[] = new DateTime('1997-12-12 09:00:00');
+        $results[] = new DateTime('1997-12-13 09:00:00');
+        $results[] = new DateTime('1997-12-14 09:00:00');
+        $results[] = new DateTime('1997-12-15 09:00:00');
+        $results[] = new DateTime('1997-12-16 09:00:00');
+        $results[] = new DateTime('1997-12-17 09:00:00');
+        $results[] = new DateTime('1997-12-18 09:00:00');
+        $results[] = new DateTime('1997-12-19 09:00:00');
+        $results[] = new DateTime('1997-12-20 09:00:00');
+        $results[] = new DateTime('1997-12-21 09:00:00');
+        $results[] = new DateTime('1997-12-22 09:00:00');
+        $results[] = new DateTime('1997-12-23 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("daily")
+          ->until(new DateTime("19971224T000000"))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other day - forever:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;INTERVAL=2
+     */
+    function testDailyThree()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-06 09:00:00');
+        $results[] = new DateTime('1997-09-08 09:00:00');
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-14 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-20 09:00:00');
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-09-24 09:00:00');
+        $results[] = new DateTime('1997-09-26 09:00:00');
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-04 09:00:00');
+        $results[] = new DateTime('1997-10-06 09:00:00');
+        $results[] = new DateTime('1997-10-08 09:00:00');
+        $results[] = new DateTime('1997-10-10 09:00:00');
+        $results[] = new DateTime('1997-10-12 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-16 09:00:00');
+        $results[] = new DateTime('1997-10-18 09:00:00');
+        $results[] = new DateTime('1997-10-20 09:00:00');
+        $results[] = new DateTime('1997-10-22 09:00:00');
+        $results[] = new DateTime('1997-10-24 09:00:00');
+        $results[] = new DateTime('1997-10-26 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-10-30 09:00:00');
+        $results[] = new DateTime('1997-11-01 09:00:00');
+        $results[] = new DateTime('1997-11-03 09:00:00');
+        $results[] = new DateTime('1997-11-05 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-11-09 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-13 09:00:00');
+        $results[] = new DateTime('1997-11-15 09:00:00');
+        $results[] = new DateTime('1997-11-17 09:00:00');
+        $results[] = new DateTime('1997-11-19 09:00:00');
+        $results[] = new DateTime('1997-11-21 09:00:00');
+        $results[] = new DateTime('1997-11-23 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-11-27 09:00:00');
+        $results[] = new DateTime('1997-11-29 09:00:00');
+        $results[] = new DateTime('1997-12-01 09:00:00');
+        $results[] = new DateTime('1997-12-03 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("daily")
+          ->interval(2)
+          ->count(47)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 10 days, 5 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5
+     */
+    function testDailyFour()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-12 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("daily")
+          ->interval(10)
+          ->count(5)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every day in January, for 3 years:
+     * DTSTART;TZID=America/New_York:19980101T090000
+     * RRULE:FREQ=DAILY;UNTIL=20000131T140000Z;BYMONTH=1
+     */
+    function testDailyFive()
+    {
+        $results[] = new DateTime('1998-01-01 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-01-03 09:00:00');
+        $results[] = new DateTime('1998-01-04 09:00:00');
+        $results[] = new DateTime('1998-01-05 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-07 09:00:00');
+        $results[] = new DateTime('1998-01-08 09:00:00');
+        $results[] = new DateTime('1998-01-09 09:00:00');
+        $results[] = new DateTime('1998-01-10 09:00:00');
+        $results[] = new DateTime('1998-01-11 09:00:00');
+        $results[] = new DateTime('1998-01-12 09:00:00');
+        $results[] = new DateTime('1998-01-13 09:00:00');
+        $results[] = new DateTime('1998-01-14 09:00:00');
+        $results[] = new DateTime('1998-01-15 09:00:00');
+        $results[] = new DateTime('1998-01-16 09:00:00');
+        $results[] = new DateTime('1998-01-17 09:00:00');
+        $results[] = new DateTime('1998-01-18 09:00:00');
+        $results[] = new DateTime('1998-01-19 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-01-21 09:00:00');
+        $results[] = new DateTime('1998-01-22 09:00:00');
+        $results[] = new DateTime('1998-01-23 09:00:00');
+        $results[] = new DateTime('1998-01-24 09:00:00');
+        $results[] = new DateTime('1998-01-25 09:00:00');
+        $results[] = new DateTime('1998-01-26 09:00:00');
+        $results[] = new DateTime('1998-01-27 09:00:00');
+        $results[] = new DateTime('1998-01-28 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-01-30 09:00:00');
+        $results[] = new DateTime('1998-01-31 09:00:00');
+        $results[] = new DateTime('1999-01-01 09:00:00');
+        $results[] = new DateTime('1999-01-02 09:00:00');
+        $results[] = new DateTime('1999-01-03 09:00:00');
+        $results[] = new DateTime('1999-01-04 09:00:00');
+        $results[] = new DateTime('1999-01-05 09:00:00');
+        $results[] = new DateTime('1999-01-06 09:00:00');
+        $results[] = new DateTime('1999-01-07 09:00:00');
+        $results[] = new DateTime('1999-01-08 09:00:00');
+        $results[] = new DateTime('1999-01-09 09:00:00');
+        $results[] = new DateTime('1999-01-10 09:00:00');
+        $results[] = new DateTime('1999-01-11 09:00:00');
+        $results[] = new DateTime('1999-01-12 09:00:00');
+        $results[] = new DateTime('1999-01-13 09:00:00');
+        $results[] = new DateTime('1999-01-14 09:00:00');
+        $results[] = new DateTime('1999-01-15 09:00:00');
+        $results[] = new DateTime('1999-01-16 09:00:00');
+        $results[] = new DateTime('1999-01-17 09:00:00');
+        $results[] = new DateTime('1999-01-18 09:00:00');
+        $results[] = new DateTime('1999-01-19 09:00:00');
+        $results[] = new DateTime('1999-01-20 09:00:00');
+        $results[] = new DateTime('1999-01-21 09:00:00');
+        $results[] = new DateTime('1999-01-22 09:00:00');
+        $results[] = new DateTime('1999-01-23 09:00:00');
+        $results[] = new DateTime('1999-01-24 09:00:00');
+        $results[] = new DateTime('1999-01-25 09:00:00');
+        $results[] = new DateTime('1999-01-26 09:00:00');
+        $results[] = new DateTime('1999-01-27 09:00:00');
+        $results[] = new DateTime('1999-01-28 09:00:00');
+        $results[] = new DateTime('1999-01-29 09:00:00');
+        $results[] = new DateTime('1999-01-30 09:00:00');
+        $results[] = new DateTime('1999-01-31 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-01-02 09:00:00');
+        $results[] = new DateTime('2000-01-03 09:00:00');
+        $results[] = new DateTime('2000-01-04 09:00:00');
+        $results[] = new DateTime('2000-01-05 09:00:00');
+        $results[] = new DateTime('2000-01-06 09:00:00');
+        $results[] = new DateTime('2000-01-07 09:00:00');
+        $results[] = new DateTime('2000-01-08 09:00:00');
+        $results[] = new DateTime('2000-01-09 09:00:00');
+        $results[] = new DateTime('2000-01-10 09:00:00');
+        $results[] = new DateTime('2000-01-11 09:00:00');
+        $results[] = new DateTime('2000-01-12 09:00:00');
+        $results[] = new DateTime('2000-01-13 09:00:00');
+        $results[] = new DateTime('2000-01-14 09:00:00');
+        $results[] = new DateTime('2000-01-15 09:00:00');
+        $results[] = new DateTime('2000-01-16 09:00:00');
+        $results[] = new DateTime('2000-01-17 09:00:00');
+        $results[] = new DateTime('2000-01-18 09:00:00');
+        $results[] = new DateTime('2000-01-19 09:00:00');
+        $results[] = new DateTime('2000-01-20 09:00:00');
+        $results[] = new DateTime('2000-01-21 09:00:00');
+        $results[] = new DateTime('2000-01-22 09:00:00');
+        $results[] = new DateTime('2000-01-23 09:00:00');
+        $results[] = new DateTime('2000-01-24 09:00:00');
+        $results[] = new DateTime('2000-01-25 09:00:00');
+        $results[] = new DateTime('2000-01-26 09:00:00');
+        $results[] = new DateTime('2000-01-27 09:00:00');
+        $results[] = new DateTime('2000-01-28 09:00:00');
+        $results[] = new DateTime('2000-01-29 09:00:00');
+        $results[] = new DateTime('2000-01-30 09:00:00');
+        $results[] = new DateTime('2000-01-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19980101T090000"))
+          ->freq("daily")
+          ->bymonth(array(1))
+          ->until(new DateTime("20000131T140000"))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+}
diff --git a/When/tests/WhenHourlyRruleTest.php b/When/tests/WhenHourlyRruleTest.php
new file mode 100755
index 0000000..bb75ad8
--- /dev/null
+++ b/When/tests/WhenHourlyRruleTest.php
@@ -0,0 +1,34 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenHourlyRruleTest extends TestCase
+{
+    /**
+     * I believe this rrule has a typo, the time zones don't match.
+     *
+     * Every 3 hours from 9:00 AM to 5:00 PM on a specific day:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=19970902T170000Z
+     */
+    public function testHourlyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00Z');
+        $results[] = new DateTime('1997-09-02 12:00:00Z');
+        $results[] = new DateTime('1997-09-02 15:00:00Z');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000Z"))
+          ->rrule("FREQ=HOURLY;INTERVAL=3;UNTIL=19970902T170000Z")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+}
diff --git a/When/tests/WhenHourlyTest.php b/When/tests/WhenHourlyTest.php
new file mode 100755
index 0000000..25d6672
--- /dev/null
+++ b/When/tests/WhenHourlyTest.php
@@ -0,0 +1,36 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenHourlyTest extends TestCase
+{
+    /**
+     * I believe this rrule has a typo, the time zones don't match.
+     *
+     * Every 3 hours from 9:00 AM to 5:00 PM on a specific day:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=19970902T170000Z
+     */
+    public function testHourlyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00Z');
+        $results[] = new DateTime('1997-09-02 12:00:00Z');
+        $results[] = new DateTime('1997-09-02 15:00:00Z');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000Z"))
+          ->freq("hourly")
+          ->interval(3)
+          ->until(new DateTime("19970902T170000Z"))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+}
diff --git a/When/tests/WhenLeapYearTest.php b/When/tests/WhenLeapYearTest.php
new file mode 100644
index 0000000..59f1927
--- /dev/null
+++ b/When/tests/WhenLeapYearTest.php
@@ -0,0 +1,102 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+
+class WhenLeapYearTest extends TestCase
+{
+    public function testRRuleEndOfMonthOnLeapYear()
+    {
+        $recur = new \When\When;
+        $recur->startDate(new \DateTime('2016-02-29 00:00:00'))->rrule('FREQ=YEARLY;BYMONTH=2;BYMONTHDAY=-1');
+        $recur->rangeLimit = 5;
+        $recur->generateOccurrences();
+
+        $dates = array(
+            '2016-02-29 00:00:00',
+            '2017-02-28 00:00:00',
+            '2018-02-28 00:00:00',
+            '2019-02-28 00:00:00',
+            '2020-02-29 00:00:00'
+        );
+        foreach ($dates as $i => $d) {
+            $dt = new \DateTime($d, new \DateTimeZone('UTC'));
+            $this->assertEquals($dt, $recur->occurrences[$i]);
+        }
+    }
+
+    public function testRRuleEndOfMonthByMonthOnLeapYear()
+    {
+        $recur = new \When\When();
+        $recur->startDate(new \DateTime('2016-02-29 00:00:00'))->rrule('FREQ=MONTHLY;BYMONTHDAY=-1');
+        $recur->rangeLimit = 5;
+        $recur->generateOccurrences();
+
+        $dates = array(
+            '2016-02-29 00:00:00',
+            '2016-03-31 00:00:00',
+            '2016-04-30 00:00:00',
+            '2016-05-31 00:00:00',
+            '2016-06-30 00:00:00'
+        );
+        foreach ($dates as $i => $d) {
+            $dt = new \DateTime($d, new \DateTimeZone('UTC'));
+            $this->assertEquals($dt, $recur->occurrences[$i]);
+        }
+    }
+
+    public function testRRuleEndOfMonthByMonthOnLeapYear2()
+    {
+        $recur = new \When\When;
+        $recur->startDate(new \DateTime('2020-01-31 00:00:00'))->rrule('FREQ=MONTHLY;BYMONTHDAY=-1,3');
+        $recur->rangeLimit = 5;
+        $recur->generateOccurrences();
+
+        $dates = array(
+            '2020-01-31 00:00:00',
+            '2020-02-03 00:00:00',
+            '2020-02-29 00:00:00',
+            '2020-03-03 00:00:00',
+            '2020-03-31 00:00:00'
+        );
+        foreach ($dates as $i => $d) {
+            $dt = new \DateTime($d, new \DateTimeZone('UTC'));
+            $this->assertEquals($dt, $recur->occurrences[$i]);
+        }
+    }
+
+    public function testRRuleEndOfMonthOnRegularYear()
+    {
+        $recur = new \When\When;
+        $recur->startDate(new \DateTime('2016-01-31 00:00:00'))->rrule('FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=-1');
+        $recur->rangeLimit = 3;
+        $recur->generateOccurrences();
+
+        $dates = array(
+            '2016-01-31 00:00:00',
+            '2017-01-31 00:00:00',
+            '2018-01-31 00:00:00'
+        );
+        foreach ($dates as $i => $d) {
+            $dt = new \DateTime($d, new \DateTimeZone('UTC'));
+            $this->assertEquals($dt, $recur->occurrences[$i]);
+        }
+    }
+
+    public function testRRuleEndOfMonthByMonth()
+    {
+        $recur = new \When\When;
+        $recur->startDate(new \DateTime('2016-01-31 00:00:00'))->rrule('FREQ=MONTHLY;BYMONTHDAY=-1');
+        $recur->rangeLimit = 3;
+        $recur->generateOccurrences();
+
+        $dates = array(
+            '2016-01-31 00:00:00',
+            '2016-02-29 00:00:00',
+            '2016-03-31 00:00:00'
+        );
+        foreach ($dates as $i => $d) {
+            $dt = new \DateTime($d, new \DateTimeZone('UTC'));
+            $this->assertEquals($dt, $recur->occurrences[$i]);
+        }
+    }
+}
diff --git a/When/tests/WhenMinutelyRruleTest.php b/When/tests/WhenMinutelyRruleTest.php
new file mode 100755
index 0000000..edd7d0e
--- /dev/null
+++ b/When/tests/WhenMinutelyRruleTest.php
@@ -0,0 +1,60 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenMinutelyRruleTest extends TestCase
+{
+    /**
+     * Every hour and a half for 4 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=MINUTELY;INTERVAL=90;COUNT=4
+     */
+    public function testMinutelyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-02 10:30:00');
+        $results[] = new DateTime('1997-09-02 12:00:00');
+        $results[] = new DateTime('1997-09-02 13:30:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=MINUTELY;INTERVAL=90;COUNT=4")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 15 minutes for 6 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=MINUTELY;INTERVAL=15;COUNT=6
+     */
+    public function testMinutelyTwo()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-02 09:15:00');
+        $results[] = new DateTime('1997-09-02 09:30:00');
+        $results[] = new DateTime('1997-09-02 09:45:00');
+        $results[] = new DateTime('1997-09-02 10:00:00');
+        $results[] = new DateTime('1997-09-02 10:15:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=MINUTELY;INTERVAL=15;COUNT=6")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+}
diff --git a/When/tests/WhenMinutelyTest.php b/When/tests/WhenMinutelyTest.php
new file mode 100755
index 0000000..51821ed
--- /dev/null
+++ b/When/tests/WhenMinutelyTest.php
@@ -0,0 +1,64 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenMinutelyTest extends TestCase
+{
+    /**
+     * Every hour and a half for 4 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=MINUTELY;INTERVAL=90;COUNT=4
+     */
+    public function testMinutelyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-02 10:30:00');
+        $results[] = new DateTime('1997-09-02 12:00:00');
+        $results[] = new DateTime('1997-09-02 13:30:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("minutely")
+          ->interval(90)
+          ->count(4)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 15 minutes for 6 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=MINUTELY;INTERVAL=15;COUNT=6
+     */
+    public function testMinutelyTwo()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-02 09:15:00');
+        $results[] = new DateTime('1997-09-02 09:30:00');
+        $results[] = new DateTime('1997-09-02 09:45:00');
+        $results[] = new DateTime('1997-09-02 10:00:00');
+        $results[] = new DateTime('1997-09-02 10:15:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("minutely")
+          ->interval(15)
+          ->count(6)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+}
diff --git a/When/tests/WhenMonthlyRruleTest.php b/When/tests/WhenMonthlyRruleTest.php
new file mode 100755
index 0000000..0974734
--- /dev/null
+++ b/When/tests/WhenMonthlyRruleTest.php
@@ -0,0 +1,550 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenMonthlyRruleTest extends TestCase
+{
+    /**
+     * Monthly on the 1st Friday for ten occurrences:
+     * DTSTART;TZID=US-Eastern:19970905T090000
+     * RRULE:FREQ=MONTHLY;COUNT=10;BYDAY=1FR
+     */
+    function testMonthlyOne()
+    {
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-12-05 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-02-06 09:00:00');
+        $results[] = new DateTime('1998-03-06 09:00:00');
+        $results[] = new DateTime('1998-04-03 09:00:00');
+        $results[] = new DateTime('1998-05-01 09:00:00');
+        $results[] = new DateTime('1998-06-05 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970905T090000"))
+          ->rrule("FREQ=MONTHLY;COUNT=10;BYDAY=1FR")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the 1st Friday until December 24, 1997:
+     * DTSTART;TZID=US-Eastern:19970905T090000
+     * RRULE:FREQ=MONTHLY;UNTIL=19971224T000000Z;BYDAY=1FR
+     */
+    function testMonthlyTwo()
+    {
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-12-05 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970905T090000"))
+          ->rrule("FREQ=MONTHLY;UNTIL=19971224T000000Z;BYDAY=1FR")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other month on the 1st and last Sunday of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970907T090000
+     * RRULE:FREQ=MONTHLY;INTERVAL=2;COUNT=10;BYDAY=1SU,-1SU
+     */
+    function testMonthlyThree()
+    {
+        $results[] = new DateTime('1997-09-07 09:00:00');
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-11-02 09:00:00');
+        $results[] = new DateTime('1997-11-30 09:00:00');
+        $results[] = new DateTime('1998-01-04 09:00:00');
+        $results[] = new DateTime('1998-01-25 09:00:00');
+        $results[] = new DateTime('1998-03-01 09:00:00');
+        $results[] = new DateTime('1998-03-29 09:00:00');
+        $results[] = new DateTime('1998-05-03 09:00:00');
+        $results[] = new DateTime('1998-05-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970907T090000"))
+          ->rrule("FREQ=MONTHLY;INTERVAL=2;COUNT=10;BYDAY=1SU,-1SU")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the second to last Monday of the month for 6 months:
+     * DTSTART;TZID=US-Eastern:19970922T090000
+     * RRULE:FREQ=MONTHLY;COUNT=6;BYDAY=-2MO
+     */
+    function testMonthlyFour()
+    {
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-10-20 09:00:00');
+        $results[] = new DateTime('1997-11-17 09:00:00');
+        $results[] = new DateTime('1997-12-22 09:00:00');
+        $results[] = new DateTime('1998-01-19 09:00:00');
+        $results[] = new DateTime('1998-02-16 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970922T090000"))
+          ->rrule("FREQ=MONTHLY;COUNT=6;BYDAY=-2MO")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the third to the last day of the month, forever:
+     * DTSTART;TZID=US-Eastern:19970928T090000
+     * RRULE:FREQ=MONTHLY;BYMONTHDAY=-3
+     */
+    function testMonthlyFive()
+    {
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-10-29 09:00:00');
+        $results[] = new DateTime('1997-11-28 09:00:00');
+        $results[] = new DateTime('1997-12-29 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-02-26 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970928T090000"))
+          ->rrule("FREQ=MONTHLY;BYMONTHDAY=-3")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the 2nd and 15th of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970902T090000
+     * RRULE:FREQ=MONTHLY;COUNT=10;BYMONTHDAY=2,15
+     */
+    function testMonthlySix()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-15 09:00:00');
+        $results[] = new DateTime('1997-11-02 09:00:00');
+        $results[] = new DateTime('1997-11-15 09:00:00');
+        $results[] = new DateTime('1997-12-02 09:00:00');
+        $results[] = new DateTime('1997-12-15 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-01-15 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=MONTHLY;COUNT=10;BYMONTHDAY=2,15")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the first and last day of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970930T090000
+     * RRULE:FREQ=MONTHLY;COUNT=10;BYMONTHDAY=1,-1
+     */
+    function testMonthlySeven()
+    {
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-01 09:00:00');
+        $results[] = new DateTime('1997-10-31 09:00:00');
+        $results[] = new DateTime('1997-11-01 09:00:00');
+        $results[] = new DateTime('1997-11-30 09:00:00');
+        $results[] = new DateTime('1997-12-01 09:00:00');
+        $results[] = new DateTime('1997-12-31 09:00:00');
+        $results[] = new DateTime('1998-01-01 09:00:00');
+        $results[] = new DateTime('1998-01-31 09:00:00');
+        $results[] = new DateTime('1998-02-01 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970930T090000"))
+          ->rrule("FREQ=MONTHLY;COUNT=10;BYMONTHDAY=1,-1")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 18 months on the 10th thru 15th of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970910T090000
+     * RRULE:FREQ=MONTHLY;INTERVAL=18;COUNT=10;BYMONTHDAY=10,11,12,13,14,15
+     */
+    function testMonhtlyEight()
+    {
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-13 09:00:00');
+        $results[] = new DateTime('1997-09-14 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1999-03-10 09:00:00');
+        $results[] = new DateTime('1999-03-11 09:00:00');
+        $results[] = new DateTime('1999-03-12 09:00:00');
+        $results[] = new DateTime('1999-03-13 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970910T090000"))
+          ->rrule("FREQ=MONTHLY;INTERVAL=18;COUNT=10;BYMONTHDAY=10,11,12,13,14,15")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every Tuesday, every other month:
+     * DTSTART;TZID=US-Eastern:19970902T090000
+     * RRULE:FREQ=MONTHLY;INTERVAL=2;BYDAY=TU
+     */
+    function testMonthlyNine()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-18 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-13 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-01-27 09:00:00');
+        $results[] = new DateTime('1998-03-03 09:00:00');
+        $results[] = new DateTime('1998-03-10 09:00:00');
+        $results[] = new DateTime('1998-03-17 09:00:00');
+        $results[] = new DateTime('1998-03-24 09:00:00');
+        $results[] = new DateTime('1998-03-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=MONTHLY;INTERVAL=2;BYDAY=TU")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every Friday the 13th, forever:
+     * DTSTART;TZID=US-Eastern:19970902T090000
+     * EXDATE;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=FR;BYMONTHDAY=13
+     *
+     * TODO: When we add in the ability to EXDATE
+     *       this DTSTART needs to be changed
+     */
+    function testMonhtlyTen()
+    {
+        $results[] = new DateTime('1998-02-13 09:00:00');
+        $results[] = new DateTime('1998-03-13 09:00:00');
+        $results[] = new DateTime('1998-11-13 09:00:00');
+        $results[] = new DateTime('1999-08-13 09:00:00');
+        $results[] = new DateTime('2000-10-13 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19980213T090000"))
+          ->rrule("FREQ=MONTHLY;BYDAY=FR;BYMONTHDAY=13")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The first Saturday that follows the first Sunday of the month, forever:
+     * DTSTART;TZID=US-Eastern:19970913T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=SA;BYMONTHDAY=7,8,9,10,11,12,13
+     */
+    function testMonthlyEleven()
+    {
+        $results[] = new DateTime('1997-09-13 09:00:00');
+        $results[] = new DateTime('1997-10-11 09:00:00');
+        $results[] = new DateTime('1997-11-08 09:00:00');
+        $results[] = new DateTime('1997-12-13 09:00:00');
+        $results[] = new DateTime('1998-01-10 09:00:00');
+        $results[] = new DateTime('1998-02-07 09:00:00');
+        $results[] = new DateTime('1998-03-07 09:00:00');
+        $results[] = new DateTime('1998-04-11 09:00:00');
+        $results[] = new DateTime('1998-05-09 09:00:00');
+        $results[] = new DateTime('1998-06-13 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970913T090000"))
+          ->rrule("FREQ=MONTHLY;BYDAY=SA;BYMONTHDAY=7,8,9,10,11,12,13")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The 3rd instance into the month of one of Tuesday, Wednesday or Thursday, for the next 3 months:
+     * DTSTART;TZID=US-Eastern:19970904T090000
+     * RRULE:FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3
+     */
+    function testMonthlyTwelve()
+    {
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-11-06 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970904T090000"))
+          ->rrule("FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * An example where an invalid date (i.e., February 30) is ignored.
+     * DTSTART;TZID=America/New_York:20070115T090000
+     * RRULE:FREQ=MONTHLY;BYMONTHDAY=15,30;COUNT=5
+     */
+    function testMonthlyThirteen()
+    {
+        $results[] = new DateTime('2007-01-15 09:00:00');
+        $results[] = new DateTime('2007-01-30 09:00:00');
+        $results[] = new DateTime('2007-02-15 09:00:00');
+        $results[] = new DateTime('2007-03-15 09:00:00');
+        $results[] = new DateTime('2007-03-30 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("20070115T090000"))
+          ->rrule("FREQ=MONTHLY;BYMONTHDAY=15,30;COUNT=5")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The second-to-last weekday of the month:
+     * DTSTART;TZID=America/New_York:19970929T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=-2
+     */
+    function testMonthylFourteen()
+    {
+        $results[] = new DateTime('1997-09-29 09:00:00');
+        $results[] = new DateTime('1997-10-30 09:00:00');
+        $results[] = new DateTime('1997-11-27 09:00:00');
+        $results[] = new DateTime('1997-12-30 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-02-26 09:00:00');
+        $results[] = new DateTime('1998-03-30 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970929T090000"))
+          ->rrule("FREQ=MONTHLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=-2")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * FREQ=MONTHLY recur rule breaks (ticket #8)
+     * DTSTART;TZID=America/New_York:20110915T100000
+     * RRULE:INTERVAL=1;FREQ=MONTHLY;UNTIL=2016-09-15T10:00:00+0100
+     */
+    function testMonthlyFifteen()
+    {
+        $results[] = new DateTime('2011-09-15 10:00:00');
+        $results[] = new DateTime('2011-10-15 10:00:00');
+        $results[] = new DateTime('2011-11-15 10:00:00');
+        $results[] = new DateTime('2011-12-15 10:00:00');
+        $results[] = new DateTime('2012-01-15 10:00:00');
+        $results[] = new DateTime('2012-02-15 10:00:00');
+        $results[] = new DateTime('2012-03-15 10:00:00');
+        $results[] = new DateTime('2012-04-15 10:00:00');
+        $results[] = new DateTime('2012-05-15 10:00:00');
+        $results[] = new DateTime('2012-06-15 10:00:00');
+        $results[] = new DateTime('2012-07-15 10:00:00');
+        $results[] = new DateTime('2012-08-15 10:00:00');
+        $results[] = new DateTime('2012-09-15 10:00:00');
+        $results[] = new DateTime('2012-10-15 10:00:00');
+        $results[] = new DateTime('2012-11-15 10:00:00');
+        $results[] = new DateTime('2012-12-15 10:00:00');
+        $results[] = new DateTime('2013-01-15 10:00:00');
+        $results[] = new DateTime('2013-02-15 10:00:00');
+        $results[] = new DateTime('2013-03-15 10:00:00');
+        $results[] = new DateTime('2013-04-15 10:00:00');
+        $results[] = new DateTime('2013-05-15 10:00:00');
+        $results[] = new DateTime('2013-06-15 10:00:00');
+        $results[] = new DateTime('2013-07-15 10:00:00');
+        $results[] = new DateTime('2013-08-15 10:00:00');
+        $results[] = new DateTime('2013-09-15 10:00:00');
+        $results[] = new DateTime('2013-10-15 10:00:00');
+        $results[] = new DateTime('2013-11-15 10:00:00');
+        $results[] = new DateTime('2013-12-15 10:00:00');
+        $results[] = new DateTime('2014-01-15 10:00:00');
+        $results[] = new DateTime('2014-02-15 10:00:00');
+        $results[] = new DateTime('2014-03-15 10:00:00');
+        $results[] = new DateTime('2014-04-15 10:00:00');
+        $results[] = new DateTime('2014-05-15 10:00:00');
+        $results[] = new DateTime('2014-06-15 10:00:00');
+        $results[] = new DateTime('2014-07-15 10:00:00');
+        $results[] = new DateTime('2014-08-15 10:00:00');
+        $results[] = new DateTime('2014-09-15 10:00:00');
+        $results[] = new DateTime('2014-10-15 10:00:00');
+        $results[] = new DateTime('2014-11-15 10:00:00');
+        $results[] = new DateTime('2014-12-15 10:00:00');
+        $results[] = new DateTime('2015-01-15 10:00:00');
+        $results[] = new DateTime('2015-02-15 10:00:00');
+        $results[] = new DateTime('2015-03-15 10:00:00');
+        $results[] = new DateTime('2015-04-15 10:00:00');
+        $results[] = new DateTime('2015-05-15 10:00:00');
+        $results[] = new DateTime('2015-06-15 10:00:00');
+        $results[] = new DateTime('2015-07-15 10:00:00');
+        $results[] = new DateTime('2015-08-15 10:00:00');
+        $results[] = new DateTime('2015-09-15 10:00:00');
+        $results[] = new DateTime('2015-10-15 10:00:00');
+        $results[] = new DateTime('2015-11-15 10:00:00');
+        $results[] = new DateTime('2015-12-15 10:00:00');
+        $results[] = new DateTime('2016-01-15 10:00:00');
+        $results[] = new DateTime('2016-02-15 10:00:00');
+        $results[] = new DateTime('2016-03-15 10:00:00');
+        $results[] = new DateTime('2016-04-15 10:00:00');
+        $results[] = new DateTime('2016-05-15 10:00:00');
+        $results[] = new DateTime('2016-06-15 10:00:00');
+        $results[] = new DateTime('2016-07-15 10:00:00');
+        $results[] = new DateTime('2016-08-15 10:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("2011-09-15 10:00:00"))
+          ->rrule("INTERVAL=1;FREQ=MONTHLY;UNTIL=2016-09-15T10:00:00+0100")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The third instance into the month of one of Tuesday, Wednesday, or Thursday, for the next 3 months:
+     * DTSTART;TZID=America/New_York:19970904T090000
+     * RRULE:FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3
+     */
+    function testMonthlySixteen()
+    {
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-11-06 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970904T090000"))
+          ->rrule("FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 2nd Monday every month for 4 months (issue #55)
+     * Checking single BYDAY with BYSETPOS while Monthly
+     * DTSTART;TZID=America/New_York:19970908T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=MO;BYSETPOS=2;COUNT=4
+     */
+    function testMonthlySeventeen()
+    {
+        $results[] = new DateTime("1997-09-08 09:00:00");
+        $results[] = new DateTime("1997-10-13 09:00:00");
+        $results[] = new DateTime("1997-11-10 09:00:00");
+        $results[] = new DateTime("1997-12-08 09:00:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("19970908T090000"))
+          ->rrule("FREQ=MONTHLY;BYDAY=MO;BYSETPOS=2;COUNT=4")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+}
diff --git a/When/tests/WhenMonthlyTest.php b/When/tests/WhenMonthlyTest.php
new file mode 100755
index 0000000..584f36c
--- /dev/null
+++ b/When/tests/WhenMonthlyTest.php
@@ -0,0 +1,605 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenMonthlyTest extends TestCase
+{
+    /**
+     * Monthly on the 1st Friday for ten occurrences:
+     * DTSTART;TZID=US-Eastern:19970905T090000
+     * RRULE:FREQ=MONTHLY;COUNT=10;BYDAY=1FR
+     */
+    function testMonthlyOne()
+    {
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-12-05 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-02-06 09:00:00');
+        $results[] = new DateTime('1998-03-06 09:00:00');
+        $results[] = new DateTime('1998-04-03 09:00:00');
+        $results[] = new DateTime('1998-05-01 09:00:00');
+        $results[] = new DateTime('1998-06-05 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970905T090000"))
+          ->freq("monthly")
+          ->count(10)
+          ->byday('1FR')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the 1st Friday until December 24, 1997:
+     * DTSTART;TZID=US-Eastern:19970905T090000
+     * RRULE:FREQ=MONTHLY;UNTIL=19971224T000000Z;BYDAY=1FR
+     */
+    function testMonthlyTwo()
+    {
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-11-07 09:00:00');
+        $results[] = new DateTime('1997-12-05 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970905T090000"))
+          ->until(new DateTime("19971224T000000Z"))
+          ->freq("monthly")
+          ->byday('1FR')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other month on the 1st and last Sunday of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970907T090000
+     * RRULE:FREQ=MONTHLY;INTERVAL=2;COUNT=10;BYDAY=1SU,-1SU
+     */
+    function testMonthlyThree()
+    {
+        $results[] = new DateTime('1997-09-07 09:00:00');
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-11-02 09:00:00');
+        $results[] = new DateTime('1997-11-30 09:00:00');
+        $results[] = new DateTime('1998-01-04 09:00:00');
+        $results[] = new DateTime('1998-01-25 09:00:00');
+        $results[] = new DateTime('1998-03-01 09:00:00');
+        $results[] = new DateTime('1998-03-29 09:00:00');
+        $results[] = new DateTime('1998-05-03 09:00:00');
+        $results[] = new DateTime('1998-05-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970907T090000"))
+          ->freq("monthly")
+          ->interval(2)
+          ->count(10)
+          ->byday('1SU,-1SU')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the second to last Monday of the month for 6 months:
+     * DTSTART;TZID=US-Eastern:19970922T090000
+     * RRULE:FREQ=MONTHLY;COUNT=6;BYDAY=-2MO
+     */
+    function testMonthlyFour()
+    {
+        $results[] = new DateTime('1997-09-22 09:00:00');
+        $results[] = new DateTime('1997-10-20 09:00:00');
+        $results[] = new DateTime('1997-11-17 09:00:00');
+        $results[] = new DateTime('1997-12-22 09:00:00');
+        $results[] = new DateTime('1998-01-19 09:00:00');
+        $results[] = new DateTime('1998-02-16 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970922T090000"))
+          ->freq("monthly")
+          ->count(6)
+          ->byday('-2MO')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the third to the last day of the month, forever:
+     * DTSTART;TZID=US-Eastern:19970928T090000
+     * RRULE:FREQ=MONTHLY;BYMONTHDAY=-3
+     */
+    function testMonthlyFive()
+    {
+        $results[] = new DateTime('1997-09-28 09:00:00');
+        $results[] = new DateTime('1997-10-29 09:00:00');
+        $results[] = new DateTime('1997-11-28 09:00:00');
+        $results[] = new DateTime('1997-12-29 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-02-26 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970928T090000"))
+          ->freq("monthly")
+          ->count(6)
+          ->bymonthday(-3)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the 2nd and 15th of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970902T090000
+     * RRULE:FREQ=MONTHLY;COUNT=10;BYMONTHDAY=2,15
+     */
+    function testMonthlySix()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-15 09:00:00');
+        $results[] = new DateTime('1997-11-02 09:00:00');
+        $results[] = new DateTime('1997-11-15 09:00:00');
+        $results[] = new DateTime('1997-12-02 09:00:00');
+        $results[] = new DateTime('1997-12-15 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-01-15 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("monthly")
+          ->count(10)
+          ->bymonthday("2, 15")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monthly on the first and last day of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970930T090000
+     * RRULE:FREQ=MONTHLY;COUNT=10;BYMONTHDAY=1,-1
+     */
+    function testMonthlySeven()
+    {
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-01 09:00:00');
+        $results[] = new DateTime('1997-10-31 09:00:00');
+        $results[] = new DateTime('1997-11-01 09:00:00');
+        $results[] = new DateTime('1997-11-30 09:00:00');
+        $results[] = new DateTime('1997-12-01 09:00:00');
+        $results[] = new DateTime('1997-12-31 09:00:00');
+        $results[] = new DateTime('1998-01-01 09:00:00');
+        $results[] = new DateTime('1998-01-31 09:00:00');
+        $results[] = new DateTime('1998-02-01 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970930T090000"))
+          ->freq("monthly")
+          ->count(10)
+          ->bymonthday("1, -1")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 18 months on the 10th thru 15th of the month for 10 occurrences:
+     * DTSTART;TZID=US-Eastern:19970910T090000
+     * RRULE:FREQ=MONTHLY;INTERVAL=18;COUNT=10;BYMONTHDAY=10,11,12,13,14,15
+     */
+    function testMonhtlyEight()
+    {
+        $results[] = new DateTime('1997-09-10 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+        $results[] = new DateTime('1997-09-12 09:00:00');
+        $results[] = new DateTime('1997-09-13 09:00:00');
+        $results[] = new DateTime('1997-09-14 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1999-03-10 09:00:00');
+        $results[] = new DateTime('1999-03-11 09:00:00');
+        $results[] = new DateTime('1999-03-12 09:00:00');
+        $results[] = new DateTime('1999-03-13 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970910T090000"))
+          ->freq("monthly")
+          ->interval(18)
+          ->count(10)
+          ->bymonthday("10,11,12,13,14,15")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every Tuesday, every other month:
+     * DTSTART;TZID=US-Eastern:19970902T090000
+     * RRULE:FREQ=MONTHLY;INTERVAL=2;BYDAY=TU
+     */
+    function testMonthlyNine()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-18 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-13 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-01-27 09:00:00');
+        $results[] = new DateTime('1998-03-03 09:00:00');
+        $results[] = new DateTime('1998-03-10 09:00:00');
+        $results[] = new DateTime('1998-03-17 09:00:00');
+        $results[] = new DateTime('1998-03-24 09:00:00');
+        $results[] = new DateTime('1998-03-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("monthly")
+          ->interval(2)
+          ->count(18)
+          ->byday("tu")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every Friday the 13th, forever:
+     * DTSTART;TZID=US-Eastern:19970902T090000
+     * EXDATE;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=FR;BYMONTHDAY=13
+     *
+     * TODO: When we add in the ability to EXDATE
+     *       this DTSTART needs to be changed
+     */
+    function testMonhtlyTen()
+    {
+        $results[] = new DateTime('1998-02-13 09:00:00');
+        $results[] = new DateTime('1998-03-13 09:00:00');
+        $results[] = new DateTime('1998-11-13 09:00:00');
+        $results[] = new DateTime('1999-08-13 09:00:00');
+        $results[] = new DateTime('2000-10-13 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19980213T090000"))
+          ->freq("monthly")
+          ->count(5)
+          ->byday("fr")
+          ->bymonthday(13)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The first Saturday that follows the first Sunday of the month, forever:
+     * DTSTART;TZID=US-Eastern:19970913T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=SA;BYMONTHDAY=7,8,9,10,11,12,13
+     */
+    function testMonthlyEleven()
+    {
+        $results[] = new DateTime('1997-09-13 09:00:00');
+        $results[] = new DateTime('1997-10-11 09:00:00');
+        $results[] = new DateTime('1997-11-08 09:00:00');
+        $results[] = new DateTime('1997-12-13 09:00:00');
+        $results[] = new DateTime('1998-01-10 09:00:00');
+        $results[] = new DateTime('1998-02-07 09:00:00');
+        $results[] = new DateTime('1998-03-07 09:00:00');
+        $results[] = new DateTime('1998-04-11 09:00:00');
+        $results[] = new DateTime('1998-05-09 09:00:00');
+        $results[] = new DateTime('1998-06-13 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970913T090000"))
+          ->freq("monthly")
+          ->count(10)
+          ->byday("sa")
+          ->bymonthday("7,8,9,10,11,12,13")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The 3rd instance into the month of one of Tuesday, Wednesday or Thursday, for the next 3 months:
+     * DTSTART;TZID=US-Eastern:19970904T090000
+     * RRULE:FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3
+     */
+    function testMonthlyTwelve()
+    {
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-11-06 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970904T090000"))
+          ->freq("monthly")
+          ->count(3)
+          ->byday("TU, WE, TH")
+          ->bysetpos("3")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * An example where an invalid date (i.e., February 30) is ignored.
+     * DTSTART;TZID=America/New_York:20070115T090000
+     * RRULE:FREQ=MONTHLY;BYMONTHDAY=15,30;COUNT=5
+     */
+    function testMonthlyThirteen()
+    {
+        $results[] = new DateTime('2007-01-15 09:00:00');
+        $results[] = new DateTime('2007-01-30 09:00:00');
+        $results[] = new DateTime('2007-02-15 09:00:00');
+        $results[] = new DateTime('2007-03-15 09:00:00');
+        $results[] = new DateTime('2007-03-30 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("20070115T090000"))
+          ->freq("monthly")
+          ->count(5)
+          ->bymonthday("15,30")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The second-to-last weekday of the month:
+     * DTSTART;TZID=America/New_York:19970929T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=-2
+     */
+    function testMonthylFourteen()
+    {
+        $results[] = new DateTime('1997-09-29 09:00:00');
+        $results[] = new DateTime('1997-10-30 09:00:00');
+        $results[] = new DateTime('1997-11-27 09:00:00');
+        $results[] = new DateTime('1997-12-30 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-02-26 09:00:00');
+        $results[] = new DateTime('1998-03-30 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970929T090000"))
+          ->freq("monthly")
+          ->count(7)
+          ->byday(array('MO', 'TU', 'WE', 'TH', 'FR'))
+          ->bysetpos(array(-2))
+          ->generateOccurrences();
+        //$r->recur('19970929T090000', 'monthly')->count(7)->byday(array('MO', 'TU', 'WE', 'TH', 'FR'))->bysetpos(array(-2));
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * FREQ=MONTHLY recur rule breaks (ticket #8)
+     * DTSTART;TZID=America/New_York:20110915T100000
+     * RRULE:INTERVAL=1;FREQ=MONTHLY;UNTIL=2016-09-15T10:00:00+0100
+     */
+    function testMonthlyFifteen()
+    {
+        $results[] = new DateTime('2011-09-15 10:00:00');
+        $results[] = new DateTime('2011-10-15 10:00:00');
+        $results[] = new DateTime('2011-11-15 10:00:00');
+        $results[] = new DateTime('2011-12-15 10:00:00');
+        $results[] = new DateTime('2012-01-15 10:00:00');
+        $results[] = new DateTime('2012-02-15 10:00:00');
+        $results[] = new DateTime('2012-03-15 10:00:00');
+        $results[] = new DateTime('2012-04-15 10:00:00');
+        $results[] = new DateTime('2012-05-15 10:00:00');
+        $results[] = new DateTime('2012-06-15 10:00:00');
+        $results[] = new DateTime('2012-07-15 10:00:00');
+        $results[] = new DateTime('2012-08-15 10:00:00');
+        $results[] = new DateTime('2012-09-15 10:00:00');
+        $results[] = new DateTime('2012-10-15 10:00:00');
+        $results[] = new DateTime('2012-11-15 10:00:00');
+        $results[] = new DateTime('2012-12-15 10:00:00');
+        $results[] = new DateTime('2013-01-15 10:00:00');
+        $results[] = new DateTime('2013-02-15 10:00:00');
+        $results[] = new DateTime('2013-03-15 10:00:00');
+        $results[] = new DateTime('2013-04-15 10:00:00');
+        $results[] = new DateTime('2013-05-15 10:00:00');
+        $results[] = new DateTime('2013-06-15 10:00:00');
+        $results[] = new DateTime('2013-07-15 10:00:00');
+        $results[] = new DateTime('2013-08-15 10:00:00');
+        $results[] = new DateTime('2013-09-15 10:00:00');
+        $results[] = new DateTime('2013-10-15 10:00:00');
+        $results[] = new DateTime('2013-11-15 10:00:00');
+        $results[] = new DateTime('2013-12-15 10:00:00');
+        $results[] = new DateTime('2014-01-15 10:00:00');
+        $results[] = new DateTime('2014-02-15 10:00:00');
+        $results[] = new DateTime('2014-03-15 10:00:00');
+        $results[] = new DateTime('2014-04-15 10:00:00');
+        $results[] = new DateTime('2014-05-15 10:00:00');
+        $results[] = new DateTime('2014-06-15 10:00:00');
+        $results[] = new DateTime('2014-07-15 10:00:00');
+        $results[] = new DateTime('2014-08-15 10:00:00');
+        $results[] = new DateTime('2014-09-15 10:00:00');
+        $results[] = new DateTime('2014-10-15 10:00:00');
+        $results[] = new DateTime('2014-11-15 10:00:00');
+        $results[] = new DateTime('2014-12-15 10:00:00');
+        $results[] = new DateTime('2015-01-15 10:00:00');
+        $results[] = new DateTime('2015-02-15 10:00:00');
+        $results[] = new DateTime('2015-03-15 10:00:00');
+        $results[] = new DateTime('2015-04-15 10:00:00');
+        $results[] = new DateTime('2015-05-15 10:00:00');
+        $results[] = new DateTime('2015-06-15 10:00:00');
+        $results[] = new DateTime('2015-07-15 10:00:00');
+        $results[] = new DateTime('2015-08-15 10:00:00');
+        $results[] = new DateTime('2015-09-15 10:00:00');
+        $results[] = new DateTime('2015-10-15 10:00:00');
+        $results[] = new DateTime('2015-11-15 10:00:00');
+        $results[] = new DateTime('2015-12-15 10:00:00');
+        $results[] = new DateTime('2016-01-15 10:00:00');
+        $results[] = new DateTime('2016-02-15 10:00:00');
+        $results[] = new DateTime('2016-03-15 10:00:00');
+        $results[] = new DateTime('2016-04-15 10:00:00');
+        $results[] = new DateTime('2016-05-15 10:00:00');
+        $results[] = new DateTime('2016-06-15 10:00:00');
+        $results[] = new DateTime('2016-07-15 10:00:00');
+        $results[] = new DateTime('2016-08-15 10:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("2011-09-15 10:00:00"))
+          ->freq("monthly")
+          ->interval(1)
+          ->until(new DateTime("2016-09-15T10:00:00+0100"))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * The third instance into the month of one of Tuesday, Wednesday, or Thursday, for the next 3 months:
+     * DTSTART;TZID=America/New_York:19970904T090000
+     * RRULE:FREQ=MONTHLY;COUNT=3;BYDAY=TU,WE,TH;BYSETPOS=3
+     */
+    function testMonthlySixteen()
+    {
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-11-06 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970904T090000"))
+          ->freq("monthly")
+          ->count(3)
+          ->byday("tu, we, th")
+          ->bysetpos(3)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every three months (quarterly) on the first Monday of the month,
+     * starting January 7 2019, until February 2, 2021 (issue #71)
+     * DTSTART;TZID=America/New_York:20190107T170000
+     * RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=1MO;WKST=MO;UNTIL=2021-02-01T18:00:00-0500
+     */
+    function testQuarterlyOne()
+    {
+        $tz = new DateTimeZone("America/New_York");
+
+        $results[] = new DateTime('2019-01-07 17:00:00', $tz);
+        $results[] = new DateTime('2019-04-01 17:00:00', $tz);
+        $results[] = new DateTime('2019-07-01 17:00:00', $tz);
+        $results[] = new DateTime('2019-10-07 17:00:00', $tz);
+        $results[] = new DateTime('2020-01-06 17:00:00', $tz);
+        $results[] = new DateTime('2020-04-06 17:00:00', $tz);
+        $results[] = new DateTime('2020-07-06 17:00:00', $tz);
+        $results[] = new DateTime('2020-10-05 17:00:00', $tz);
+        $results[] = new DateTime('2021-01-04 17:00:00', $tz);
+
+        $r = new When();
+        $r->startDate(new DateTime("20190107T170000", $tz))
+          ->freq("monthly")
+          ->interval(3)
+          ->byday('1MO')
+          ->until(new DateTime("2021-02-01T18:00:00", $tz))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+
+        /* Check that $occurrences doesn't have extra results, as well */
+        $this->assertEquals(count($occurrences), count($results));
+    }
+
+}
diff --git a/When/tests/WhenNextPrevTest.php b/When/tests/WhenNextPrevTest.php
new file mode 100644
index 0000000..ffb06c8
--- /dev/null
+++ b/When/tests/WhenNextPrevTest.php
@@ -0,0 +1,117 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenNextPrevTest extends TestCase
+{
+
+    /**
+     * Note: for this recurrence ...
+     *   $r = new When();
+     *   $r->startDate(new DateTime("19970902T090000"))
+     *     ->rrule("FREQ=WEEKLY");
+     *
+     * The first few dates are:
+     *
+     *  $results[] = new DateTime('1997-09-02 09:00:00');
+     *  $results[] = new DateTime('1997-09-09 09:00:00');
+     *  $results[] = new DateTime('1997-09-16 09:00:00');
+     *  $results[] = new DateTime('1997-09-23 09:00:00');
+     *  $results[] = new DateTime('1997-09-30 09:00:00');
+     *  $results[] = new DateTime('1997-10-07 09:00:00');
+     *  $results[] = new DateTime('1997-10-14 09:00:00');
+     *  $results[] = new DateTime('1997-10-21 09:00:00');
+     *  $results[] = new DateTime('1997-10-28 09:00:00');
+     *  $results[] = new DateTime('1997-11-04 09:00:00');
+     */
+
+    /* Test getting next occurrence */
+    function testGetNextOccurrence() {
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $expected = new DateTime('1997-09-23 09:00:00');
+        $result = $r->getNextOccurrence(new DateTime("19970917T090000"));
+        $this->assertEquals($expected, $result);
+
+    }
+
+    /* Test getting next occurrence, using $strictly_after=FALSE with date in recurrence  */
+    function testGetNextOccurrenceNotStrictlyAfterMatchingDateTime() {
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $expected = new DateTime('1997-09-16 09:00:00');
+        $result = $r->getNextOccurrence(new DateTime("19970916T090000"), FALSE);
+        $this->assertEquals($expected, $result);
+
+    }
+
+    /* Test getting next occurrence, using $strictly_after=FALSE with date in recurrence, time not. */
+    function testGetNextOccurrenceNotStrictlyAfterMatchingDateMismatchedTime() {
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $expected = new DateTime('1997-09-23 09:00:00');
+        $result = $r->getNextOccurrence(new DateTime("19970916T093000"), FALSE);
+        $this->assertEquals($expected, $result);
+
+    }
+
+    /* Test getting next occurrence, using $strictly_after=TRUE (default)  with date in recurrence  */
+    function testGetNextOccurrenceStrictlyAfterMatchingDate() {
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $expected = new DateTime('1997-09-23 09:00:00');
+        $result = $r->getNextOccurrence(new DateTime("19970916T090000"));
+        $this->assertEquals($expected, $result);
+
+    }
+
+    /* Test getting next occurence on last occurrence */
+    function testGetNextOccurrenceFromLastOccurence() {
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY")
+          ->until(new DateTime("19971104T090000"));
+
+        $result = $r->getNextOccurrence(new DateTime("19971104T090000"));
+        $this->assertFalse($result);
+    }
+
+
+    /* Test getting previous occurrence */
+    function testGetPrevOccurrenceFromLastOccurence() {
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY")
+          ->until(new DateTime("19971104T090000"));
+
+        $expected = new DateTime("1997-10-28 09:00:00");
+
+        $result = $r->getPrevOccurrence(new DateTime("19971104T090000"));
+        $this->assertEquals($expected, $result);
+    }
+
+    /* Test that getting previous occurrence from the first returns FALSE */
+    function testGetPrevOccurrenceFromFirstOccurence() {
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY")
+          ->until(new DateTime("19971104T090000"));
+
+        $result = $r->getPrevOccurrence(new DateTime("19970902T090000"));
+        $this->assertFalse($result);
+    }
+
+}
diff --git a/When/tests/WhenOccurrencesBetweenTest.php b/When/tests/WhenOccurrencesBetweenTest.php
new file mode 100644
index 0000000..f5bfa2e
--- /dev/null
+++ b/When/tests/WhenOccurrencesBetweenTest.php
@@ -0,0 +1,438 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenOccurrencesBetweenTest extends TestCase
+{
+
+    /* Get slices of an unbounded weekly recurrence */
+    function testGetWeeklyOccurrencesBetweenEarlySlice() {
+        $results = array();
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1997-09-02 09:00:00'),
+        new DateTime('1997-11-04 09:01:00'));
+
+        foreach ($results as $key => $result) {
+             $this->assertEquals($result, $occurrences[$key]);
+        }
+
+        /* Check that $occurrences doesn't have extra dates, as well */
+        $this->assertEquals(count($occurrences), count($results));
+    }
+
+    /* Get slices of an unbounded weekly recurrence */
+    function testGetWeeklyOccurrencesBetweenLaterSlice() {
+
+        $results = array();
+        $results[] = new DateTime('2016-01-26 09:00:00');
+        $results[] = new DateTime('2016-02-02 09:00:00');
+        $results[] = new DateTime('2016-02-09 09:00:00');
+        $results[] = new DateTime('2016-02-16 09:00:00');
+        $results[] = new DateTime('2016-02-23 09:00:00');
+        $results[] = new DateTime('2016-03-01 09:00:00');
+        $results[] = new DateTime('2016-03-08 09:00:00');
+        $results[] = new DateTime('2016-03-15 09:00:00');
+        $results[] = new DateTime('2016-03-22 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('2016-01-25 09:00:00'),
+        new DateTime('2016-03-22 09:01:00'));
+
+        foreach ($results as $key => $result) {
+             $this->assertEquals($result, $occurrences[$key]);
+        }
+
+        /* Check that $occurrences doesn't have extra dates, as well */
+        $this->assertEquals(count($occurrences), count($results));
+    }
+
+
+    /* Get a slice of an unbounded recurrence, with a limit */
+    function testGetWeeklyOccurrencesBetweenEarlySliceWithLimit() {
+        $results = array();
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1997-09-02 09:00:00'),
+        new DateTime('1997-11-04 09:01:00'), 3);
+
+        foreach ($results as $key => $result) {
+             $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+
+    function testGetWeeklyOccurrenceWindowBeforeStartDate() {
+        $results = array();
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1987-09-02 09:00:00'),
+        new DateTime('1997-11-04 09:01:00'));
+
+        foreach ($results as $key => $result) {
+             $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+
+    /* Test use of until date on bounded occurrence */
+    function testGetWeeklyOccurrenceWindowAfterUntilDate() {
+        $results = array();
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY")
+          ->until(new DateTime("19971105T090000"));;
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1997-09-02 09:00:00'),
+        new DateTime('2007-11-04 09:01:00'));
+
+        $this->assertEquals(count($results), count($occurrences));
+        foreach ($results as $key => $result) {
+             $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /* Test use of count on bounded occurrence */
+    function testGetWeeklyOccurrenceWindowBoundedByCount() {
+        $results = array();
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY")
+          ->count(10);
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1997-09-02 09:00:00'),
+        new DateTime('2007-11-04 09:01:00'));
+
+        $this->assertEquals(count($results), count($occurrences));
+        foreach ($results as $key => $result) {
+             $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /* Test use of count on bounded occurrence with window starting after recurrence start*/
+    function testGetWeeklyOccurrenceWindowCountAndStartDate() {
+        $results = array();
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY")
+          ->count(10);
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1997-09-23 09:00:00'),
+        new DateTime('2007-11-04 09:01:00'));
+
+        $this->assertEquals(count($results), count($occurrences));
+        foreach ($results as $key => $result) {
+             $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /* Test use of count on bounded occurrence, where no events match window */
+    function testGetWeeklyOccurrenceWindowCountAndStartDateNoResults() {
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY")
+          ->count(10);
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1997-11-05 09:00:00'),
+        new DateTime('2007-11-04 09:01:00'));
+
+        $this->assertEquals(0, count($occurrences));
+    }
+
+    /* Empty results on backwards date range */
+    function testGetWeeklyOccurrencesBackwardsDateRange() {
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY");
+
+        $occurrences = $r->getOccurrencesBetween(new DateTime('1997-11-04 09:01:00'),
+        new DateTime('1997-09-02 09:00:00'));
+
+        $this->assertEquals(0, count($occurrences));
+    }
+
+    /**
+     * Every 2nd Monday between Sept 1 - Dec 1 1997 (issue #58)
+     * Checking single BYDAY with BYSETPOS while Monthly
+     * DTSTART;TZID=America/New_York:19970908T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=MO;BYSETPOS=2;
+     */
+    function testGetMonthlyOccurrencesBydayBysetpos()
+    {
+        $results[] = new DateTime("1997-09-08 09:00:00");
+        $results[] = new DateTime("1997-10-13 09:00:00");
+        $results[] = new DateTime("1997-11-10 09:00:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("19970908T090000"))
+          ->rrule("FREQ=MONTHLY;BYDAY=MO;BYSETPOS=2;");
+        $occurrences = $r->getOccurrencesBetween(
+            new DateTime( "19970901T090000" ),
+            new DateTime( "19971201T090000" )
+        );
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * First 4 2nd Fridays between July 3 - Nov 3 2016
+     * Checking against BYSETPOS caused undefined offset
+     * DTSTART;TZID=America/New_York:20160610T090000
+     * RRULE:FREQ=MONTHLY;BYDAY=FR;BYSETPOS=2;COUNT=3;
+     */
+    function testGetMonthlyOccurrencesBysetposUndefinedOffset()
+    {
+        $results[] = new DateTime("2016-07-08 09:00:00");
+        $results[] = new DateTime("2016-08-12 09:00:00");
+        $results[] = new DateTime("2016-09-09 09:00:00");
+        $results[] = new DateTime("2016-10-14 09:00:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("20160610T090000"))
+          ->rrule("FREQ=MONTHLY;BYDAY=FR;BYSETPOS=2");
+        $occurrences = $r->getOccurrencesBetween(
+            new DateTime( "20160703T090000" ),
+            new DateTime( "20161103T090000" )
+        );
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    function testGetOccurrencesBetweenWithExclusions() {
+        $results[] = new DateTime("2016-07-08 09:00:00");
+        $results[] = new DateTime("2016-09-09 09:00:00");
+        $results[] = new DateTime("2016-10-14 09:00:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("20160610T090000"))
+          ->rrule("FREQ=MONTHLY;BYDAY=FR;BYSETPOS=2")
+          ->exclusions(array(new DateTime("2016-08-12 09:00:00")));
+        $occurrences = $r->getOccurrencesBetween(
+            new DateTime( "20160703T090000" ),
+            new DateTime( "20161103T090000" )
+        );
+
+         foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+
+    }
+
+    /**
+     * Check if we capture occurrences beyond rangeLimit (200)
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;
+     *
+     * '2001-07-03 09:00:00' = #201
+     * '2001-07-31 09:00:00' = #205
+     */
+    function testOutsideRangeLimit()
+    {
+        $results[] = new DateTime('2001-07-03 09:00:00');
+        $results[] = new DateTime('2001-07-10 09:00:00');
+        $results[] = new DateTime('2001-07-17 09:00:00');
+        $results[] = new DateTime('2001-07-24 09:00:00');
+        $results[] = new DateTime('2001-07-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;");
+        $occurrences = $r->getOccurrencesBetween(
+            new DateTime( "20010702T090000" ),
+            new DateTime( "20010801T090000" )
+        );
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Check if we capture occurrences within and beyond rangeLimit (200)
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;
+     *
+     * '2001-05-22 09:00:00' = #195
+     * '2001-07-31 09:00:00' = #205
+     */
+    function testRangeLimit()
+    {
+        $results[] = new DateTime('2001-05-22 09:00:00');
+        $results[] = new DateTime('2001-05-29 09:00:00');
+        $results[] = new DateTime('2001-06-05 09:00:00');
+        $results[] = new DateTime('2001-06-12 09:00:00');
+        $results[] = new DateTime('2001-06-19 09:00:00');
+        $results[] = new DateTime('2001-06-26 09:00:00');
+        $results[] = new DateTime('2001-07-03 09:00:00');
+        $results[] = new DateTime('2001-07-10 09:00:00');
+        $results[] = new DateTime('2001-07-17 09:00:00');
+        $results[] = new DateTime('2001-07-24 09:00:00');
+        $results[] = new DateTime('2001-07-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;");
+        $occurrences = $r->getOccurrencesBetween(
+            new DateTime( "20010521T090000" ),
+            new DateTime( "20010801T090000" )
+        );
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Check that we don't alter results
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;
+     *
+     * '2001-07-03 09:00:00' = #201
+     * '2001-07-31 09:00:00' = #205
+     */
+    function testCurruptingThis()
+    {
+        $results[] = new DateTime('2001-07-03 09:00:00');
+        $results[] = new DateTime('2001-07-10 09:00:00');
+        $results[] = new DateTime('2001-07-17 09:00:00');
+        $results[] = new DateTime('2001-07-24 09:00:00');
+        $results[] = new DateTime('2001-07-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;");
+        $occurrences = $r->getOccurrencesBetween(
+            new DateTime( "20010521T090000" ),
+            new DateTime( "20010612T090000" )
+        );
+
+        $occurrences2 = $r->getOccurrencesBetween(
+            new DateTime( "20010702T090000" ),
+            new DateTime( "20010801T090000" )
+        );
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences2[$key]);
+        }
+    }
+
+    /**
+     * Every three months (quarterly) on the first Monday of the month,
+     * starting January 7 2019, until February 2, 2021 (issue #71)
+     * DTSTART;TZID=America/Los_Angeles:20190107T170000
+     * RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=1MO;WKST=MO;UNTIL=2021-02-01T18:00:00-0800
+     */
+    function testGetQuarterlyOccurrencesByDay()
+    {
+        $tz = new DateTimeZone("America/New_York");
+
+        $results[] = new DateTime('2019-01-07 17:00:00', $tz);
+        $results[] = new DateTime('2019-04-01 17:00:00', $tz);
+        $results[] = new DateTime('2019-07-01 17:00:00', $tz);
+        $results[] = new DateTime('2019-10-07 17:00:00', $tz);
+        $results[] = new DateTime('2020-01-06 17:00:00', $tz);
+
+        $startDt = new DateTime("20190107T170000", $tz);
+
+        $r = new When();
+        $r->startDate($startDt)
+          ->freq("monthly")
+          ->interval(3)
+          ->byday("1MO")
+          ->wkst("MO")
+          ->until(new DateTime("2021-02-01T18:00:00", $tz))
+          ->generateOccurrences();
+
+        $occurrences = $r->getOccurrencesBetween(
+            new DateTime("20190101T170000"),
+            new DateTime("20200301T170000")
+        );
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+
+        /* Check that $occurrences doesn't have extra dates, as well */
+        $this->assertEquals(count($occurrences), count($results));
+    }
+
+
+}
diff --git a/When/tests/WhenValidTest.php b/When/tests/WhenValidTest.php
new file mode 100755
index 0000000..ad6dbed
--- /dev/null
+++ b/When/tests/WhenValidTest.php
@@ -0,0 +1,287 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\Valid;
+
+class WhenValidTest extends TestCase
+{
+
+    public function testValidDateTimeObject()
+    {
+        $this->assertTrue(Valid::dateTimeObject(new DateTime()));
+    }
+
+    public function testInvalidDateTimeObject()
+    {
+        $this->assertFalse(Valid::dateTimeObject(new FakeObject()));
+        $this->assertFalse(Valid::dateTimeObject(array()));
+        $this->assertFalse(Valid::dateTimeObject("20121010"));
+    }
+
+    public function testValidValidFreq()
+    {
+        // case insensitive
+        $this->assertTrue(Valid::freq("Secondly"));
+        $this->assertTrue(Valid::freq("minuTely"));
+        $this->assertTrue(Valid::freq("HOURLY"));
+        $this->assertTrue(Valid::freq("daily"));
+        $this->assertTrue(Valid::freq("weekly"));
+        $this->assertTrue(Valid::freq("monthly"));
+        $this->assertTrue(Valid::freq("yearly"));
+    }
+
+    public function testInvalidValidFreq()
+    {
+        $this->assertFalse(Valid::freq("month"));
+    }
+
+    public function testValidValidWeekDay()
+    {
+        // case insensitive
+        $this->assertTrue(Valid::weekDay("SU"));
+        $this->assertTrue(Valid::weekDay("MO"));
+        $this->assertTrue(Valid::weekDay("tu"));
+        $this->assertTrue(Valid::weekDay("We"));
+        $this->assertTrue(Valid::weekDay("th"));
+        $this->assertTrue(Valid::weekDay("FR"));
+        $this->assertTrue(Valid::weekDay("sa"));
+    }
+
+    public function testInvalidValidWeekDay()
+    {
+        $this->assertFalse(Valid::weekDay("va"));
+    }
+
+    public function testValidValidSecond()
+    {
+        $this->assertTrue(Valid::second(0));
+        $this->assertTrue(Valid::second(1));
+        $this->assertTrue(Valid::second("5"));
+        $this->assertTrue(Valid::second("59"));
+        $this->assertTrue(Valid::second(60));
+    }
+
+    public function testInvalidValidSecond()
+    {
+        $this->assertFalse(Valid::second(-1));
+        $this->assertFalse(Valid::second(90));
+        $this->assertFalse(Valid::second("61"));
+        $this->assertFalse(Valid::second(-60));
+    }
+
+    public function testValidValidMinute()
+    {
+        $this->assertTrue(Valid::minute(0));
+        $this->assertTrue(Valid::minute(21));
+        $this->assertTrue(Valid::minute("31"));
+        $this->assertTrue(Valid::minute("55"));
+        $this->assertTrue(Valid::minute(59));
+    }
+
+    public function testInvalidValidMinute()
+    {
+        $this->assertFalse(Valid::minute(-1));
+        $this->assertFalse(Valid::minute(99));
+        $this->assertFalse(Valid::minute("60"));
+        $this->assertFalse(Valid::minute(-60));
+    }
+
+    public function testValidValidHour()
+    {
+        $this->assertTrue(Valid::hour(0));
+        $this->assertTrue(Valid::hour(5));
+        $this->assertTrue(Valid::hour("8"));
+        $this->assertTrue(Valid::hour("19"));
+        $this->assertTrue(Valid::hour(23));
+    }
+
+    public function testInvalidValidHour()
+    {
+        $this->assertFalse(Valid::hour(-1));
+        $this->assertFalse(Valid::hour(24));
+        $this->assertFalse(Valid::hour(1000));
+        $this->assertFalse(Valid::hour("60"));
+        $this->assertFalse(Valid::hour(-60));
+    }
+
+    public function testValidWeekNum()
+    {
+        $this->assertTrue(Valid::weekNum("1"));
+        $this->assertTrue(Valid::weekNum(-1));
+        $this->assertTrue(Valid::weekNum("52"));
+        $this->assertTrue(Valid::weekNum(-53));
+    }
+
+    public function testInvalidWeekNum()
+    {
+        $this->assertFalse(Valid::weekNum(0));
+        $this->assertFalse(Valid::weekNum(-54));
+        $this->assertFalse(Valid::weekNum("54"));
+        $this->assertFalse(Valid::weekNum(93));
+    }
+
+    public function testValidOrdWk()
+    {
+        $this->assertTrue(Valid::ordWk("1"));
+        $this->assertTrue(Valid::ordWk(1));
+        $this->assertTrue(Valid::ordWk("52"));
+        $this->assertTrue(Valid::ordWk(53));
+    }
+
+    public function testInvalidOrdWk()
+    {
+        $this->assertFalse(Valid::ordWk(0));
+        $this->assertFalse(Valid::ordWk(-1));
+        $this->assertFalse(Valid::ordWk("54"));
+        $this->assertFalse(Valid::ordWk(93));
+    }
+
+    public function testValidYearDayNum()
+    {
+        $this->assertTrue(Valid::yearDayNum("1"));
+        $this->assertTrue(Valid::yearDayNum(-1));
+        $this->assertTrue(Valid::yearDayNum("90"));
+        $this->assertTrue(Valid::yearDayNum(-366));
+    }
+
+    public function testInvalidYearDayNum()
+    {
+        $this->assertFalse(Valid::yearDayNum(0));
+        $this->assertFalse(Valid::yearDayNum(-367));
+        $this->assertFalse(Valid::yearDayNum("380"));
+        $this->assertFalse(Valid::yearDayNum(399));
+    }
+
+    public function testValidSetPosDay()
+    {
+        $this->assertTrue(Valid::setPosDay("1"));
+        $this->assertTrue(Valid::setPosDay(-1));
+        $this->assertTrue(Valid::setPosDay("150"));
+        $this->assertTrue(Valid::setPosDay(-366));
+    }
+
+    public function testInvalidSetPosDay()
+    {
+        $this->assertFalse(Valid::setPosDay(0));
+        $this->assertFalse(Valid::setPosDay(-367));
+        $this->assertFalse(Valid::setPosDay("380"));
+        $this->assertFalse(Valid::setPosDay(399));
+    }
+
+    public function testValidMonthNum()
+    {
+        $this->assertTrue(Valid::monthNum("1"));
+        $this->assertTrue(Valid::monthNum(1));
+        $this->assertTrue(Valid::monthNum("9"));
+        $this->assertTrue(Valid::monthNum(12));
+    }
+
+    public function testInvalidMonthNum()
+    {
+        $this->assertFalse(Valid::monthNum("-1"));
+        $this->assertFalse(Valid::monthNum(0));
+        $this->assertFalse(Valid::monthNum("99"));
+        $this->assertFalse(Valid::monthNum(-12));
+    }
+
+    public function testValidOrdYrDay()
+    {
+        $this->assertTrue(Valid::ordYrDay("1"));
+        $this->assertTrue(Valid::ordYrDay(1));
+        $this->assertTrue(Valid::ordYrDay("366"));
+        $this->assertTrue(Valid::ordYrDay(365));
+    }
+
+    public function testInvalidOrdYrDay()
+    {
+        $this->assertFalse(Valid::ordYrDay("-1"));
+        $this->assertFalse(Valid::ordYrDay(0));
+        $this->assertFalse(Valid::ordYrDay("-366"));
+        $this->assertFalse(Valid::ordYrDay(367));
+    }
+
+    public function testValidValidItemsList()
+    {
+        $this->assertTrue(Valid::itemsList(array(1, 3, 5), 'second'));
+        $this->assertTrue(Valid::itemsList(array(1, 3, 5), 'minute'));
+        $this->assertTrue(Valid::itemsList(array(1, 3, 5), 'hour'));
+        $this->assertTrue(Valid::itemsList(array(-1, -3, -5, 5, 30), 'monthDayNum'));
+        $this->assertTrue(Valid::itemsList(array(-300, -3, -5, 5, 366), 'yearDayNum'));
+    }
+
+    public function testInvalidValidItemsList()
+    {
+        $this->assertFalse(Valid::itemsList(array(1, 3, 99), 'second'));
+        $this->assertFalse(Valid::itemsList(array(1, -3, 51), 'minute'));
+        $this->assertFalse(Valid::itemsList(array(-1, 3, 24), 'hour'));
+        $this->assertFalse(Valid::itemsList(array(-1, -3, -5, 5, 55), 'monthDayNum'));
+        $this->assertFalse(Valid::itemsList(array(-300, -3, -5, 5, 367), 'yearDayNum'));
+    }
+
+    public function testValidValidDaysList()
+    {
+        $this->assertTrue(Valid::daysList(array("-52MO", "-2TU", "+1WE", "SA", "40TU")));
+        $this->assertTrue(Valid::daysList(array("-52Mo", "-2tU", "+1WE", "SA", "40TU")));
+    }
+
+    public function testInvalidValidDaysList()
+    {
+        $this->assertFalse(Valid::daysList(array("-asdf")));
+        $this->assertFalse(Valid::daysList(array("-54mo")));
+        $this->assertFalse(Valid::daysList(array("-54TA")));
+        $this->assertFalse(Valid::daysList(array("-52MO", "+1WA")));
+    }
+
+    public function testValidMonthDayNum()
+    {
+        $this->assertTrue(Valid::monthDayNum("1"));
+        $this->assertTrue(Valid::monthDayNum(-1));
+        $this->assertTrue(Valid::monthDayNum("-23"));
+        $this->assertTrue(Valid::monthDayNum(31));
+    }
+
+    public function testInvalidMonthDayNum()
+    {
+        $this->assertFalse(Valid::monthDayNum(0));
+        $this->assertFalse(Valid::monthDayNum(-32));
+        $this->assertFalse(Valid::monthDayNum("99"));
+        $this->assertFalse(Valid::monthDayNum(32));
+    }
+
+    public function testValidOrdMoDay()
+    {
+        $this->assertTrue(Valid::ordMoDay("1"));
+        $this->assertTrue(Valid::ordMoDay(1));
+        $this->assertTrue(Valid::ordMoDay("23"));
+        $this->assertTrue(Valid::ordMoDay(31));
+    }
+
+    public function testInvalidOrdMoDay()
+    {
+        $this->assertFalse(Valid::ordMoDay(0));
+        $this->assertFalse(Valid::ordMoDay(-1));
+        $this->assertFalse(Valid::ordMoDay("99"));
+        $this->assertFalse(Valid::ordMoDay(32));
+    }
+
+    /*public function testByFreqValid()
+    {
+
+    }*/
+
+    public function testValidDateTimeList()
+    {
+        $this->assertTrue(Valid::dateTimeList([date_create()]));
+        $this->assertTrue(Valid::dateTimeList([date_create(),date_create()]));
+        $this->assertTrue(Valid::dateTimeList([date_create(), 'string']));
+    }
+
+    public function testInvalidDateTimeList() {
+        $this->assertFalse(Valid::dateTimeList([]));
+        $this->assertFalse(Valid::dateTimeList('string'));
+        $this->assertFalse(Valid::dateTimeList('string, string2'));
+        $this->assertFalse(Valid::dateTimeList(['string', 'string2']));
+    }
+}
+
+class FakeObject {}
diff --git a/When/tests/WhenWeeklyRruleTest.php b/When/tests/WhenWeeklyRruleTest.php
new file mode 100755
index 0000000..5c8639b
--- /dev/null
+++ b/When/tests/WhenWeeklyRruleTest.php
@@ -0,0 +1,334 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenWeeklyRruleTest extends TestCase
+{
+    /**
+     * Weekly for 10 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;COUNT=10
+     */
+    function testWeeklyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;COUNT=10")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Weekly until December 24, 1997:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;UNTIL=19971224T000000Z
+     */
+    function testWeeklyTwo()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-18 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-12-02 09:00:00');
+        $results[] = new DateTime('1997-12-09 09:00:00');
+        $results[] = new DateTime('1997-12-16 09:00:00');
+        $results[] = new DateTime('1997-12-23 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;UNTIL=19971224T000000Z")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other week - forever:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;WKST=SU
+     */
+    function testWeeklyThree()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-12-09 09:00:00');
+        $results[] = new DateTime('1997-12-23 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-02-03 09:00:00');
+        $results[] = new DateTime('1998-02-17 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;INTERVAL=2;WKST=SU")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Weekly on Tuesday and Thursday for five weeks:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;UNTIL=19971007T000000Z;WKST=SU;BYDAY=TU,TH
+     * or
+     * RRULE:FREQ=WEEKLY;COUNT=10;WKST=SU;BYDAY=TU,TH
+     */
+    function testWeeklyFour()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-25 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;UNTIL=19971007T000000Z;WKST=SU;BYDAY=TU,TH")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+
+        unset($r);
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;COUNT=10;WKST=SU;BYDAY=TU,TH")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other week on Monday, Wednesday, and Friday until December 24, 1997, starting on Monday, September 1, 1997:
+     * DTSTART;TZID=America/New_York:19970901T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;UNTIL=19971224T000000Z;WKST=SU;BYDAY=MO,WE,FR
+     */
+    function testWeeklyFive()
+    {
+        $results[] = new DateTime('1997-09-01 09:00:00');
+        $results[] = new DateTime('1997-09-03 09:00:00');
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1997-09-17 09:00:00');
+        $results[] = new DateTime('1997-09-19 09:00:00');
+        $results[] = new DateTime('1997-09-29 09:00:00');
+        $results[] = new DateTime('1997-10-01 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-10-13 09:00:00');
+        $results[] = new DateTime('1997-10-15 09:00:00');
+        $results[] = new DateTime('1997-10-17 09:00:00');
+        $results[] = new DateTime('1997-10-27 09:00:00');
+        $results[] = new DateTime('1997-10-29 09:00:00');
+        $results[] = new DateTime('1997-10-31 09:00:00');
+        $results[] = new DateTime('1997-11-10 09:00:00');
+        $results[] = new DateTime('1997-11-12 09:00:00');
+        $results[] = new DateTime('1997-11-14 09:00:00');
+        $results[] = new DateTime('1997-11-24 09:00:00');
+        $results[] = new DateTime('1997-11-26 09:00:00');
+        $results[] = new DateTime('1997-11-28 09:00:00');
+        $results[] = new DateTime('1997-12-08 09:00:00');
+        $results[] = new DateTime('1997-12-10 09:00:00');
+        $results[] = new DateTime('1997-12-12 09:00:00');
+        $results[] = new DateTime('1997-12-22 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970901T090000"))
+          ->rrule("FREQ=WEEKLY;INTERVAL=2;UNTIL=19971224T000000Z;WKST=SU;BYDAY=MO,WE,FR")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other week on Tuesday and Thursday, for 8 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;COUNT=8;WKST=SU;BYDAY=TU,TH
+     */
+    function testWeeklySix()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-16 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->rrule("FREQ=WEEKLY;INTERVAL=2;COUNT=8;WKST=SU;BYDAY=TU,TH")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * An example where the days generated makes a difference because of WKST:
+     * DTSTART;TZID=America/New_York:19970805T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;COUNT=4;BYDAY=TU,SU;WKST=MO
+     */
+    function testWeeklySeven()
+    {
+        $results[] = new DateTime('1997-08-05 09:00:00');
+        $results[] = new DateTime('1997-08-10 09:00:00');
+        $results[] = new DateTime('1997-08-19 09:00:00');
+        $results[] = new DateTime('1997-08-24 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970805T090000"))
+          ->rrule("FREQ=WEEKLY;INTERVAL=2;COUNT=4;BYDAY=TU,SU;WKST=MO")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * changing only WKST from MO to SU, yields different results...
+     * DTSTART;TZID=America/New_York:19970805T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;COUNT=4;BYDAY=TU,SU;WKST=SU
+     */
+    function testWeeklyEight()
+    {
+        $results[] = new DateTime('1997-08-05 09:00:00');
+        $results[] = new DateTime('1997-08-17 09:00:00');
+        $results[] = new DateTime('1997-08-19 09:00:00');
+        $results[] = new DateTime('1997-08-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970805T090000"))
+          ->rrule("FREQ=WEEKLY;INTERVAL=2;COUNT=4;BYDAY=TU,SU;WKST=SU")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    function testNman12WeeklyBug()
+    {
+        $results[] = new DateTime('2014-02-10 00:00:00');
+        $results[] = new DateTime('2014-02-11 00:00:00');
+        $results[] = new DateTime('2014-02-24 00:00:00');
+        $results[] = new DateTime('2014-02-25 00:00:00');
+        $results[] = new DateTime('2014-03-10 00:00:00');
+        $results[] = new DateTime('2014-03-11 00:00:00');
+        $results[] = new DateTime('2014-03-24 00:00:00');
+        $results[] = new DateTime('2014-03-25 00:00:00');
+        $results[] = new DateTime('2014-04-07 00:00:00');
+        $results[] = new DateTime('2014-04-08 00:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("2014-02-10"))
+          ->rrule("FREQ=WEEKLY;INTERVAL=2;BYDAY=MO,TU;COUNT=10")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * every 1st Mon or Fri every week, for 4 weeks (ticket #55)
+     * I'm sure there is a more useful way to use BYSETPOS weekly...
+     * DTSTART;TZID=America/New_York:19970808T090000
+     * RRULE:FREQ=WEEKLY;BYDAY=MO,FR;COUNT=4;BYSETPOS=1
+     */
+    function testWeeklyNine()
+    {
+        $results[] = new DateTime('1997-08-08 09:00:00');
+        $results[] = new DateTime('1997-08-11 09:00:00');
+        $results[] = new DateTime('1997-08-18 09:00:00');
+        $results[] = new DateTime('1997-08-25 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970808T090000"))
+          ->rrule("FREQ=WEEKLY;BYDAY=MO,FR;COUNT=4;BYSETPOS=1")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+}
diff --git a/When/tests/WhenWeeklyTest.php b/When/tests/WhenWeeklyTest.php
new file mode 100755
index 0000000..5fdbf05
--- /dev/null
+++ b/When/tests/WhenWeeklyTest.php
@@ -0,0 +1,351 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenWeeklyTest extends TestCase
+{
+    /**
+     * Weekly for 10 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;COUNT=10
+     */
+    function testWeeklyOne()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("weekly")
+          ->count(10)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Weekly until December 24, 1997:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;UNTIL=19971224T000000Z
+     */
+    function testWeeklyTwo()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-07 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-21 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-04 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-18 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-12-02 09:00:00');
+        $results[] = new DateTime('1997-12-09 09:00:00');
+        $results[] = new DateTime('1997-12-16 09:00:00');
+        $results[] = new DateTime('1997-12-23 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("weekly")
+          ->until(new DateTime("19971224T000000"))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other week - forever:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;WKST=SU
+     */
+    function testWeeklyThree()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-28 09:00:00');
+        $results[] = new DateTime('1997-11-11 09:00:00');
+        $results[] = new DateTime('1997-11-25 09:00:00');
+        $results[] = new DateTime('1997-12-09 09:00:00');
+        $results[] = new DateTime('1997-12-23 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-02-03 09:00:00');
+        $results[] = new DateTime('1998-02-17 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("weekly")
+          ->count(13)
+          ->interval(2)
+          ->wkst("SU")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Weekly on Tuesday and Thursday for five weeks:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;UNTIL=19971007T000000Z;WKST=SU;BYDAY=TU,TH
+     * or
+     * RRULE:FREQ=WEEKLY;COUNT=10;WKST=SU;BYDAY=TU,TH
+     */
+    function testWeeklyFour()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-09 09:00:00');
+        $results[] = new DateTime('1997-09-11 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-23 09:00:00');
+        $results[] = new DateTime('1997-09-25 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("weekly")
+          ->until(new DateTime("19971007T000000"))
+          ->wkst("SU")
+          ->byday(array('TU', 'TH'))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+
+        unset($r);
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("weekly")
+          ->count(10)
+          ->wkst("SU")
+          ->byday(array('TU', 'TH'))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other week on Monday, Wednesday, and Friday until December 24, 1997, starting on Monday, September 1, 1997:
+     * DTSTART;TZID=America/New_York:19970901T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;UNTIL=19971224T000000Z;WKST=SU;BYDAY=MO,WE,FR
+     */
+    function testWeeklyFive()
+    {
+        $results[] = new DateTime('1997-09-01 09:00:00');
+        $results[] = new DateTime('1997-09-03 09:00:00');
+        $results[] = new DateTime('1997-09-05 09:00:00');
+        $results[] = new DateTime('1997-09-15 09:00:00');
+        $results[] = new DateTime('1997-09-17 09:00:00');
+        $results[] = new DateTime('1997-09-19 09:00:00');
+        $results[] = new DateTime('1997-09-29 09:00:00');
+        $results[] = new DateTime('1997-10-01 09:00:00');
+        $results[] = new DateTime('1997-10-03 09:00:00');
+        $results[] = new DateTime('1997-10-13 09:00:00');
+        $results[] = new DateTime('1997-10-15 09:00:00');
+        $results[] = new DateTime('1997-10-17 09:00:00');
+        $results[] = new DateTime('1997-10-27 09:00:00');
+        $results[] = new DateTime('1997-10-29 09:00:00');
+        $results[] = new DateTime('1997-10-31 09:00:00');
+        $results[] = new DateTime('1997-11-10 09:00:00');
+        $results[] = new DateTime('1997-11-12 09:00:00');
+        $results[] = new DateTime('1997-11-14 09:00:00');
+        $results[] = new DateTime('1997-11-24 09:00:00');
+        $results[] = new DateTime('1997-11-26 09:00:00');
+        $results[] = new DateTime('1997-11-28 09:00:00');
+        $results[] = new DateTime('1997-12-08 09:00:00');
+        $results[] = new DateTime('1997-12-10 09:00:00');
+        $results[] = new DateTime('1997-12-12 09:00:00');
+        $results[] = new DateTime('1997-12-22 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970901T090000"))
+          ->freq("weekly")
+          ->until(new DateTime("19971224T000000"))
+          ->wkst("SU")
+          ->interval(2)
+          ->byday(array('MO', 'WE', 'FR'))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other week on Tuesday and Thursday, for 8 occurrences:
+     * DTSTART;TZID=America/New_York:19970902T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;COUNT=8;WKST=SU;BYDAY=TU,TH
+     */
+    function testWeeklySix()
+    {
+        $results[] = new DateTime('1997-09-02 09:00:00');
+        $results[] = new DateTime('1997-09-04 09:00:00');
+        $results[] = new DateTime('1997-09-16 09:00:00');
+        $results[] = new DateTime('1997-09-18 09:00:00');
+        $results[] = new DateTime('1997-09-30 09:00:00');
+        $results[] = new DateTime('1997-10-02 09:00:00');
+        $results[] = new DateTime('1997-10-14 09:00:00');
+        $results[] = new DateTime('1997-10-16 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970902T090000"))
+          ->freq("weekly")
+          ->wkst("SU")
+          ->interval(2)
+          ->count(8)
+          ->byday(array('TU', 'TH'))
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * An example where the days generated makes a difference because of WKST:
+     * DTSTART;TZID=America/New_York:19970805T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;COUNT=4;BYDAY=TU,SU;WKST=MO
+     */
+    function testWeeklySeven()
+    {
+        $results[] = new DateTime('1997-08-05 09:00:00');
+        $results[] = new DateTime('1997-08-10 09:00:00');
+        $results[] = new DateTime('1997-08-19 09:00:00');
+        $results[] = new DateTime('1997-08-24 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970805T090000"))
+          ->freq("weekly")
+          ->interval(2)
+          ->count(4)
+          ->byday(array('TU', 'SU'))
+          ->wkst('MO')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * changing only WKST from MO to SU, yields different results...
+     * DTSTART;TZID=America/New_York:19970805T090000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;COUNT=4;BYDAY=TU,SU;WKST=SU
+     */
+    function testWeeklyEight()
+    {
+        $results[] = new DateTime('1997-08-05 09:00:00');
+        $results[] = new DateTime('1997-08-17 09:00:00');
+        $results[] = new DateTime('1997-08-19 09:00:00');
+        $results[] = new DateTime('1997-08-31 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970805T090000"))
+          ->freq("weekly")
+          ->interval(2)
+          ->count(4)
+          ->byday(array('TU', 'SU'))
+          ->wkst('SU')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every other week - forever:
+     * DTSTART;TZID=America/New_York:19970902T000000
+     * RRULE:FREQ=WEEKLY;INTERVAL=2;WKST=TU
+     *
+     * Weekstart meets first occurrence,
+     * time is midnight.
+     *
+     * @see https://github.com/tplaner/When/issues/45
+     */
+    function testWeeklyNine()
+    {
+        $results[] = new DateTime('1997-09-02 00:00:00');
+        $results[] = new DateTime('1997-09-16 00:00:00');
+        $results[] = new DateTime('1997-09-30 00:00:00');
+        $results[] = new DateTime('1997-10-14 00:00:00');
+        $results[] = new DateTime('1997-10-28 00:00:00');
+        $results[] = new DateTime('1997-11-11 00:00:00');
+        $results[] = new DateTime('1997-11-25 00:00:00');
+        $results[] = new DateTime('1997-12-09 00:00:00');
+        $results[] = new DateTime('1997-12-23 00:00:00');
+        $results[] = new DateTime('1998-01-06 00:00:00');
+        $results[] = new DateTime('1998-01-20 00:00:00');
+        $results[] = new DateTime('1998-02-03 00:00:00');
+        $results[] = new DateTime('1998-02-17 00:00:00');
+
+        $r = new When();
+        $r->startDate(new \DateTime('1997-09-02 00:00:00'))
+            ->freq('weekly')
+            ->interval(2)
+            ->wkst('TU')
+            ->count(13)
+            ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+}
diff --git a/When/tests/WhenYearlyRruleTest.php b/When/tests/WhenYearlyRruleTest.php
new file mode 100755
index 0000000..04d4842
--- /dev/null
+++ b/When/tests/WhenYearlyRruleTest.php
@@ -0,0 +1,539 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenYearlyRruleTest extends TestCase
+{
+    /**
+     * DTSTART;TZID=US-Eastern:19970610T090000
+     * RRULE:FREQ=YEARLY;COUNT=10;BYMONTH=6,7
+     */
+    public function testYearlyOne()
+    {
+        $results[] = new DateTime('1997-06-10 09:00:00');
+        $results[] = new DateTime('1997-07-10 09:00:00');
+        $results[] = new DateTime('1998-06-10 09:00:00');
+        $results[] = new DateTime('1998-07-10 09:00:00');
+        $results[] = new DateTime('1999-06-10 09:00:00');
+        $results[] = new DateTime('1999-07-10 09:00:00');
+        $results[] = new DateTime('2000-06-10 09:00:00');
+        $results[] = new DateTime('2000-07-10 09:00:00');
+        $results[] = new DateTime('2001-06-10 09:00:00');
+        $results[] = new DateTime('2001-07-10 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970610T090000"))
+          ->rrule("FREQ=YEARLY;COUNT=10;BYMONTH=6,7")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * DTSTART;TZID=US-Eastern:19970101T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=3;COUNT=10;BYYEARDAY=1,100,200
+     */
+    public function testYearlyTwo()
+    {
+        $results[] = new DateTime('1997-01-01 09:00:00');
+        $results[] = new DateTime('1997-04-10 09:00:00');
+        $results[] = new DateTime('1997-07-19 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-04-09 09:00:00');
+        $results[] = new DateTime('2000-07-18 09:00:00');
+        $results[] = new DateTime('2003-01-01 09:00:00');
+        $results[] = new DateTime('2003-04-10 09:00:00');
+        $results[] = new DateTime('2003-07-19 09:00:00');
+        $results[] = new DateTime('2006-01-01 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970101T090000"))
+          ->rrule("FREQ=YEARLY;INTERVAL=3;COUNT=10;BYYEARDAY=1,100,200")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * DTSTART;TZID=US-Eastern:19970310T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=2;COUNT=10;BYMONTH=1,2,3
+     */
+    public function testYearlyThree()
+    {
+        $results[] = new DateTime('1997-03-10 09:00:00');
+        $results[] = new DateTime('1999-01-10 09:00:00');
+        $results[] = new DateTime('1999-02-10 09:00:00');
+        $results[] = new DateTime('1999-03-10 09:00:00');
+        $results[] = new DateTime('2001-01-10 09:00:00');
+        $results[] = new DateTime('2001-02-10 09:00:00');
+        $results[] = new DateTime('2001-03-10 09:00:00');
+        $results[] = new DateTime('2003-01-10 09:00:00');
+        $results[] = new DateTime('2003-02-10 09:00:00');
+        $results[] = new DateTime('2003-03-10 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970310T090000"))
+          ->rrule("FREQ=YEARLY;INTERVAL=2;COUNT=10;BYMONTH=1,2,3")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * DTSTART;TZID=US-Eastern:19980101T090000
+     * RRULE:FREQ=YEARLY;UNTIL=20000131T090000Z;BYMONTH=1;BYDAY=SU,MO,TU,WE,TH,FR,SA
+     */
+    public function testYearlyFour()
+    {
+        $results[] = new DateTime('1998-01-01 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-01-03 09:00:00');
+        $results[] = new DateTime('1998-01-04 09:00:00');
+        $results[] = new DateTime('1998-01-05 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-07 09:00:00');
+        $results[] = new DateTime('1998-01-08 09:00:00');
+        $results[] = new DateTime('1998-01-09 09:00:00');
+        $results[] = new DateTime('1998-01-10 09:00:00');
+        $results[] = new DateTime('1998-01-11 09:00:00');
+        $results[] = new DateTime('1998-01-12 09:00:00');
+        $results[] = new DateTime('1998-01-13 09:00:00');
+        $results[] = new DateTime('1998-01-14 09:00:00');
+        $results[] = new DateTime('1998-01-15 09:00:00');
+        $results[] = new DateTime('1998-01-16 09:00:00');
+        $results[] = new DateTime('1998-01-17 09:00:00');
+        $results[] = new DateTime('1998-01-18 09:00:00');
+        $results[] = new DateTime('1998-01-19 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-01-21 09:00:00');
+        $results[] = new DateTime('1998-01-22 09:00:00');
+        $results[] = new DateTime('1998-01-23 09:00:00');
+        $results[] = new DateTime('1998-01-24 09:00:00');
+        $results[] = new DateTime('1998-01-25 09:00:00');
+        $results[] = new DateTime('1998-01-26 09:00:00');
+        $results[] = new DateTime('1998-01-27 09:00:00');
+        $results[] = new DateTime('1998-01-28 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-01-30 09:00:00');
+        $results[] = new DateTime('1998-01-31 09:00:00');
+        $results[] = new DateTime('1999-01-01 09:00:00');
+        $results[] = new DateTime('1999-01-02 09:00:00');
+        $results[] = new DateTime('1999-01-03 09:00:00');
+        $results[] = new DateTime('1999-01-04 09:00:00');
+        $results[] = new DateTime('1999-01-05 09:00:00');
+        $results[] = new DateTime('1999-01-06 09:00:00');
+        $results[] = new DateTime('1999-01-07 09:00:00');
+        $results[] = new DateTime('1999-01-08 09:00:00');
+        $results[] = new DateTime('1999-01-09 09:00:00');
+        $results[] = new DateTime('1999-01-10 09:00:00');
+        $results[] = new DateTime('1999-01-11 09:00:00');
+        $results[] = new DateTime('1999-01-12 09:00:00');
+        $results[] = new DateTime('1999-01-13 09:00:00');
+        $results[] = new DateTime('1999-01-14 09:00:00');
+        $results[] = new DateTime('1999-01-15 09:00:00');
+        $results[] = new DateTime('1999-01-16 09:00:00');
+        $results[] = new DateTime('1999-01-17 09:00:00');
+        $results[] = new DateTime('1999-01-18 09:00:00');
+        $results[] = new DateTime('1999-01-19 09:00:00');
+        $results[] = new DateTime('1999-01-20 09:00:00');
+        $results[] = new DateTime('1999-01-21 09:00:00');
+        $results[] = new DateTime('1999-01-22 09:00:00');
+        $results[] = new DateTime('1999-01-23 09:00:00');
+        $results[] = new DateTime('1999-01-24 09:00:00');
+        $results[] = new DateTime('1999-01-25 09:00:00');
+        $results[] = new DateTime('1999-01-26 09:00:00');
+        $results[] = new DateTime('1999-01-27 09:00:00');
+        $results[] = new DateTime('1999-01-28 09:00:00');
+        $results[] = new DateTime('1999-01-29 09:00:00');
+        $results[] = new DateTime('1999-01-30 09:00:00');
+        $results[] = new DateTime('1999-01-31 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-01-02 09:00:00');
+        $results[] = new DateTime('2000-01-03 09:00:00');
+        $results[] = new DateTime('2000-01-04 09:00:00');
+        $results[] = new DateTime('2000-01-05 09:00:00');
+        $results[] = new DateTime('2000-01-06 09:00:00');
+        $results[] = new DateTime('2000-01-07 09:00:00');
+        $results[] = new DateTime('2000-01-08 09:00:00');
+        $results[] = new DateTime('2000-01-09 09:00:00');
+        $results[] = new DateTime('2000-01-10 09:00:00');
+        $results[] = new DateTime('2000-01-11 09:00:00');
+        $results[] = new DateTime('2000-01-12 09:00:00');
+        $results[] = new DateTime('2000-01-13 09:00:00');
+        $results[] = new DateTime('2000-01-14 09:00:00');
+        $results[] = new DateTime('2000-01-15 09:00:00');
+        $results[] = new DateTime('2000-01-16 09:00:00');
+        $results[] = new DateTime('2000-01-17 09:00:00');
+        $results[] = new DateTime('2000-01-18 09:00:00');
+        $results[] = new DateTime('2000-01-19 09:00:00');
+        $results[] = new DateTime('2000-01-20 09:00:00');
+        $results[] = new DateTime('2000-01-21 09:00:00');
+        $results[] = new DateTime('2000-01-22 09:00:00');
+        $results[] = new DateTime('2000-01-23 09:00:00');
+        $results[] = new DateTime('2000-01-24 09:00:00');
+        $results[] = new DateTime('2000-01-25 09:00:00');
+        $results[] = new DateTime('2000-01-26 09:00:00');
+        $results[] = new DateTime('2000-01-27 09:00:00');
+        $results[] = new DateTime('2000-01-28 09:00:00');
+        $results[] = new DateTime('2000-01-29 09:00:00');
+        $results[] = new DateTime('2000-01-30 09:00:00');
+        $results[] = new DateTime('2000-01-31 09:00:00');
+
+        $r = new When();
+
+        $r->startDate(new DateTime("19980101T090000"))
+          ->rrule("FREQ=YEARLY;UNTIL=20000131T090000;BYMONTH=1;BYDAY=SU,MO,TU,WE,TH,FR,SA")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monday of week number 20 (where the default start of the week is Monday), forever:
+     * DTSTART;TZID=US-Eastern:19970512T090000
+     * RRULE:FREQ=YEARLY;BYWEEKNO=20;BYDAY=MO
+     * Results limited to first 10 since this has no enddate or count.
+     */
+     function testYearlyFive()
+     {
+        $results[] = new DateTime('1997-05-12 09:00:00');
+        $results[] = new DateTime('1998-05-11 09:00:00');
+        $results[] = new DateTime('1999-05-17 09:00:00');
+        $results[] = new DateTime('2000-05-15 09:00:00');
+        $results[] = new DateTime('2001-05-14 09:00:00');
+        $results[] = new DateTime('2002-05-13 09:00:00');
+        $results[] = new DateTime('2003-05-12 09:00:00');
+        $results[] = new DateTime('2004-05-10 09:00:00');
+        $results[] = new DateTime('2005-05-16 09:00:00');
+        $results[] = new DateTime('2006-05-15 09:00:00');
+
+        $r = new When();
+
+        $r->startDate(new DateTime("19970512T090000"))
+          ->rrule("FREQ=YEARLY;BYWEEKNO=20;BYDAY=MO;COUNT=10")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+     }
+
+     /**
+      * Every Thursday in March, forever:
+      * DTSTART;TZID=US-Eastern:19970313T090000
+      * RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=TH
+      */
+     function testYearlySix()
+     {
+        $results[] = new DateTime('1997-03-13 09:00:00');
+        $results[] = new DateTime('1997-03-20 09:00:00');
+        $results[] = new DateTime('1997-03-27 09:00:00');
+        $results[] = new DateTime('1998-03-05 09:00:00');
+        $results[] = new DateTime('1998-03-12 09:00:00');
+        $results[] = new DateTime('1998-03-19 09:00:00');
+        $results[] = new DateTime('1998-03-26 09:00:00');
+        $results[] = new DateTime('1999-03-04 09:00:00');
+        $results[] = new DateTime('1999-03-11 09:00:00');
+        $results[] = new DateTime('1999-03-18 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970313T090000"))
+          ->rrule("FREQ=YEARLY;BYMONTH=3;BYDAY=TH;COUNT=10")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+     }
+
+    /**
+     * Every Thursday, but only during June, July, and August, forever:
+     * DTSTART;TZID=US-Eastern:19970605T090000
+     * RRULE:FREQ=YEARLY;BYDAY=TH;BYMONTH=6,7,8
+     */
+    function testYearlySeven()
+    {
+        $results[] = new DateTime('1997-06-05 09:00:00');
+        $results[] = new DateTime('1997-06-12 09:00:00');
+        $results[] = new DateTime('1997-06-19 09:00:00');
+        $results[] = new DateTime('1997-06-26 09:00:00');
+        $results[] = new DateTime('1997-07-03 09:00:00');
+        $results[] = new DateTime('1997-07-10 09:00:00');
+        $results[] = new DateTime('1997-07-17 09:00:00');
+        $results[] = new DateTime('1997-07-24 09:00:00');
+        $results[] = new DateTime('1997-07-31 09:00:00');
+        $results[] = new DateTime('1997-08-07 09:00:00');
+        $results[] = new DateTime('1997-08-14 09:00:00');
+        $results[] = new DateTime('1997-08-21 09:00:00');
+        $results[] = new DateTime('1997-08-28 09:00:00');
+        $results[] = new DateTime('1998-06-04 09:00:00');
+        $results[] = new DateTime('1998-06-11 09:00:00');
+        $results[] = new DateTime('1998-06-18 09:00:00');
+        $results[] = new DateTime('1998-06-25 09:00:00');
+        $results[] = new DateTime('1998-07-02 09:00:00');
+        $results[] = new DateTime('1998-07-09 09:00:00');
+        $results[] = new DateTime('1998-07-16 09:00:00');
+        $results[] = new DateTime('1998-07-23 09:00:00');
+        $results[] = new DateTime('1998-07-30 09:00:00');
+        $results[] = new DateTime('1998-08-06 09:00:00');
+        $results[] = new DateTime('1998-08-13 09:00:00');
+        $results[] = new DateTime('1998-08-20 09:00:00');
+        $results[] = new DateTime('1998-08-27 09:00:00');
+        $results[] = new DateTime('1999-06-03 09:00:00');
+        $results[] = new DateTime('1999-06-10 09:00:00');
+        $results[] = new DateTime('1999-06-17 09:00:00');
+        $results[] = new DateTime('1999-06-24 09:00:00');
+        $results[] = new DateTime('1999-07-01 09:00:00');
+        $results[] = new DateTime('1999-07-08 09:00:00');
+        $results[] = new DateTime('1999-07-15 09:00:00');
+        $results[] = new DateTime('1999-07-22 09:00:00');
+        $results[] = new DateTime('1999-07-29 09:00:00');
+        $results[] = new DateTime('1999-08-05 09:00:00');
+        $results[] = new DateTime('1999-08-12 09:00:00');
+        $results[] = new DateTime('1999-08-19 09:00:00');
+        $results[] = new DateTime('1999-08-26 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970605T090000"))
+          ->rrule("FREQ=YEARLY;BYDAY=TH;BYMONTH=6,7,8;COUNT=39")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every four years, the first Tuesday after a Monday in November, forever (U.S. Presidential Election day):
+     * DTSTART;TZID=US-Eastern:19961105T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=4;BYMONTH=11;BYDAY=TU;BYMONTHDAY=2,3,4,5,6,7,8
+     */
+    function testYearlyEight()
+    {
+        $results[] = new DateTime('1996-11-05 09:00:00');
+        $results[] = new DateTime('2000-11-07 09:00:00');
+        $results[] = new DateTime('2004-11-02 09:00:00');
+        $results[] = new DateTime('2008-11-04 09:00:00');
+        $results[] = new DateTime('2012-11-06 09:00:00');
+        $results[] = new DateTime('2016-11-08 09:00:00');
+        $results[] = new DateTime('2020-11-03 09:00:00');
+        $results[] = new DateTime('2024-11-05 09:00:00');
+        $results[] = new DateTime('2028-11-07 09:00:00');
+        $results[] = new DateTime('2032-11-02 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19961105T090000"))
+          ->rrule("FREQ=YEARLY;INTERVAL=4;BYMONTH=11;BYDAY=TU;BYMONTHDAY=2,3,4,5,6,7,8")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every third year on the 1st, 100th, and 200th day for 10 occurrences:
+     * DTSTART;TZID=America/New_York:19970101T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=3;COUNT=10;BYYEARDAY=1,100,200
+     */
+    function testYearlyNine()
+    {
+        $results[] = new DateTime('1997-01-01 09:00:00');
+        $results[] = new DateTime('1997-04-10 09:00:00');
+        $results[] = new DateTime('1997-07-19 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-04-09 09:00:00');
+        $results[] = new DateTime('2000-07-18 09:00:00');
+        $results[] = new DateTime('2003-01-01 09:00:00');
+        $results[] = new DateTime('2003-04-10 09:00:00');
+        $results[] = new DateTime('2003-07-19 09:00:00');
+        $results[] = new DateTime('2006-01-01 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970101T090000"))
+          ->rrule("FREQ=YEARLY;INTERVAL=3;COUNT=10;BYYEARDAY=1,100,200")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    // this test actually should have failed,
+    // I didn't set the proper start date for the calendar import
+    /**
+     * Every year on the -1th, -100th, and -200th day for 5 occurrences (checked via google calendar import below)
+     * BEGIN:VCALENDAR
+     * PRODID:-//Google Inc//Google Calendar 70.9054//EN
+     * VERSION:2.0
+     * CALSCALE:GREGORIAN
+     * METHOD:PUBLISH
+     * BEGIN:VTIMEZONE
+     * TZID:America/New_York
+     * X-LIC-LOCATION:America/New_York
+     * BEGIN:DAYLIGHT
+     * TZOFFSETFROM:-0500
+     * TZOFFSETTO:-0400
+     * TZNAME:EDT
+     * DTSTART:19700308T020000
+     * RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU
+     * END:DAYLIGHT
+     * BEGIN:STANDARD
+     * TZOFFSETFROM:-0400
+     * TZOFFSETTO:-0500
+     * TZNAME:EST
+     * DTSTART:19701101T020000
+     * RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU
+     * END:STANDARD
+     * END:VTIMEZONE
+     * BEGIN:VEVENT
+     * DTSTART;VALUE=DATE:20101231
+     * RRULE:FREQ=YEARLY;COUNT=5;BYYEARDAY=-1,-100,-200
+     * DTSTAMP:20101231T090000
+     * CREATED:20101231T090000
+     * DESCRIPTION:
+     * LAST-MODIFIED:20101231T090000
+     * LOCATION:
+     * SEQUENCE:2
+     * STATUS:CONFIRMED
+     * SUMMARY:testing yearly event
+     * TRANSP:TRANSPARENT
+     * END:VEVENT
+     * END:VCALENDAR
+     */
+    function testYearlyTen()
+    {
+        $results[] = new DateTime('2010-12-31 09:00:00');
+        $results[] = new DateTime('2011-06-15 09:00:00');
+        $results[] = new DateTime('2011-09-23 09:00:00');
+        $results[] = new DateTime('2011-12-31 09:00:00');
+        $results[] = new DateTime('2012-06-15 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("20101231T090000"))
+          ->rrule("FREQ=YEARLY;COUNT=5;BYYEARDAY=-1,-100,-200")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every Sunday in January every other year at 8:30 am and 9:30 am
+     * DTSTART;TZID=America/New_York:19970105T083000
+     * RRULE:FREQ=YEARLY;INTERVAL=2;BYMONTH=1;BYDAY=SU;BYHOUR=8,9;BYMINUTE=30
+     */
+    function testYearlyEleven()
+    {
+        $results[] = new DateTime("1997-01-05 08:30:00");
+        $results[] = new DateTime("1997-01-05 09:30:00");
+        $results[] = new DateTime("1997-01-12 08:30:00");
+        $results[] = new DateTime("1997-01-12 09:30:00");
+        $results[] = new DateTime("1997-01-19 08:30:00");
+        $results[] = new DateTime("1997-01-19 09:30:00");
+        $results[] = new DateTime("1997-01-26 08:30:00");
+        $results[] = new DateTime("1997-01-26 09:30:00");
+        $results[] = new DateTime("1999-01-03 08:30:00");
+        $results[] = new DateTime("1999-01-03 09:30:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("19970105T083000"))
+          ->rrule("FREQ=YEARLY;INTERVAL=2;BYMONTH=1;BYDAY=SU;BYHOUR=8,9;BYMINUTE=30")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 1st Monday in April every year for 2 years (ticket #55)
+     * DTSTART;TZID=America/New_York:19970407T090000
+     * RRULE:FREQ=YEARLY;BYDAY=MO;BYSETPOS=1;BYMONTH=4;COUNT=2
+     */
+    function testYearlyTwelve()
+    {
+        $results[] = new DateTime("1997-04-07 09:00:00");
+        $results[] = new DateTime("1998-04-06 09:00:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("19970407T090000"))
+          ->rrule("FREQ=YEARLY;BYDAY=MO;BYSETPOS=1;BYMONTH=4;COUNT=2")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every 1st Monday, Tuesday, or Wednesday in April every year for 3 years (ticket #55)
+     * DTSTART;TZID=America/New_York:19970407T090000
+     * RRULE:FREQ=YEARLY;BYDAY=MO,TU,WE;BYSETPOS=1;BYMONTH=4;COUNT=3
+     */
+    function testYearlyThirteen()
+    {
+        $results[] = new DateTime("1997-04-07 09:00:00");
+        $results[] = new DateTime("1998-04-01 09:00:00");
+        $results[] = new DateTime("1999-04-05 09:00:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("19970407T090000"))
+          ->rrule("FREQ=YEARLY;BYDAY=MO,TU,WE;BYSETPOS=1;BYMONTH=4;COUNT=3")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+}
diff --git a/When/tests/WhenYearlyTest.php b/When/tests/WhenYearlyTest.php
new file mode 100755
index 0000000..ef3d265
--- /dev/null
+++ b/When/tests/WhenYearlyTest.php
@@ -0,0 +1,556 @@
+<?php
+
+use PHPUnit\Framework\TestCase;
+use When\When;
+
+class WhenYearlyTest extends TestCase
+{
+    /**
+     * DTSTART;TZID=US-Eastern:19970610T090000
+     * RRULE:FREQ=YEARLY;COUNT=10;BYMONTH=6,7
+     */
+    public function testYearlyOne()
+    {
+        $results[] = new DateTime('1997-06-10 09:00:00');
+        $results[] = new DateTime('1997-07-10 09:00:00');
+        $results[] = new DateTime('1998-06-10 09:00:00');
+        $results[] = new DateTime('1998-07-10 09:00:00');
+        $results[] = new DateTime('1999-06-10 09:00:00');
+        $results[] = new DateTime('1999-07-10 09:00:00');
+        $results[] = new DateTime('2000-06-10 09:00:00');
+        $results[] = new DateTime('2000-07-10 09:00:00');
+        $results[] = new DateTime('2001-06-10 09:00:00');
+        $results[] = new DateTime('2001-07-10 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970610T090000"))
+          ->freq("yearly")
+          ->count(10)
+          ->bymonth("6, 7")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * DTSTART;TZID=US-Eastern:19970101T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=3;COUNT=10;BYYEARDAY=1,100,200
+     */
+    public function testYearlyTwo()
+    {
+        $results[] = new DateTime('1997-01-01 09:00:00');
+        $results[] = new DateTime('1997-04-10 09:00:00');
+        $results[] = new DateTime('1997-07-19 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-04-09 09:00:00');
+        $results[] = new DateTime('2000-07-18 09:00:00');
+        $results[] = new DateTime('2003-01-01 09:00:00');
+        $results[] = new DateTime('2003-04-10 09:00:00');
+        $results[] = new DateTime('2003-07-19 09:00:00');
+        $results[] = new DateTime('2006-01-01 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970101T090000"))
+          ->freq("yearly")
+          ->interval(3)
+          ->count(10)
+          ->byyearday("1,100,200")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * DTSTART;TZID=US-Eastern:19970310T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=2;COUNT=10;BYMONTH=1,2,3
+     */
+    public function testYearlyThree()
+    {
+        $results[] = new DateTime('1997-03-10 09:00:00');
+        $results[] = new DateTime('1999-01-10 09:00:00');
+        $results[] = new DateTime('1999-02-10 09:00:00');
+        $results[] = new DateTime('1999-03-10 09:00:00');
+        $results[] = new DateTime('2001-01-10 09:00:00');
+        $results[] = new DateTime('2001-02-10 09:00:00');
+        $results[] = new DateTime('2001-03-10 09:00:00');
+        $results[] = new DateTime('2003-01-10 09:00:00');
+        $results[] = new DateTime('2003-02-10 09:00:00');
+        $results[] = new DateTime('2003-03-10 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970310T090000"))
+          ->freq("yearly")
+          ->interval(2)
+          ->count(10)
+          ->bymonth("1,2,3")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * DTSTART;TZID=US-Eastern:19980101T090000
+     * RRULE:FREQ=YEARLY;UNTIL=20000131T090000Z;BYMONTH=1;BYDAY=SU,MO,TU,WE,TH,FR,SA
+     */
+    public function testYearlyFour()
+    {
+        $results[] = new DateTime('1998-01-01 09:00:00');
+        $results[] = new DateTime('1998-01-02 09:00:00');
+        $results[] = new DateTime('1998-01-03 09:00:00');
+        $results[] = new DateTime('1998-01-04 09:00:00');
+        $results[] = new DateTime('1998-01-05 09:00:00');
+        $results[] = new DateTime('1998-01-06 09:00:00');
+        $results[] = new DateTime('1998-01-07 09:00:00');
+        $results[] = new DateTime('1998-01-08 09:00:00');
+        $results[] = new DateTime('1998-01-09 09:00:00');
+        $results[] = new DateTime('1998-01-10 09:00:00');
+        $results[] = new DateTime('1998-01-11 09:00:00');
+        $results[] = new DateTime('1998-01-12 09:00:00');
+        $results[] = new DateTime('1998-01-13 09:00:00');
+        $results[] = new DateTime('1998-01-14 09:00:00');
+        $results[] = new DateTime('1998-01-15 09:00:00');
+        $results[] = new DateTime('1998-01-16 09:00:00');
+        $results[] = new DateTime('1998-01-17 09:00:00');
+        $results[] = new DateTime('1998-01-18 09:00:00');
+        $results[] = new DateTime('1998-01-19 09:00:00');
+        $results[] = new DateTime('1998-01-20 09:00:00');
+        $results[] = new DateTime('1998-01-21 09:00:00');
+        $results[] = new DateTime('1998-01-22 09:00:00');
+        $results[] = new DateTime('1998-01-23 09:00:00');
+        $results[] = new DateTime('1998-01-24 09:00:00');
+        $results[] = new DateTime('1998-01-25 09:00:00');
+        $results[] = new DateTime('1998-01-26 09:00:00');
+        $results[] = new DateTime('1998-01-27 09:00:00');
+        $results[] = new DateTime('1998-01-28 09:00:00');
+        $results[] = new DateTime('1998-01-29 09:00:00');
+        $results[] = new DateTime('1998-01-30 09:00:00');
+        $results[] = new DateTime('1998-01-31 09:00:00');
+        $results[] = new DateTime('1999-01-01 09:00:00');
+        $results[] = new DateTime('1999-01-02 09:00:00');
+        $results[] = new DateTime('1999-01-03 09:00:00');
+        $results[] = new DateTime('1999-01-04 09:00:00');
+        $results[] = new DateTime('1999-01-05 09:00:00');
+        $results[] = new DateTime('1999-01-06 09:00:00');
+        $results[] = new DateTime('1999-01-07 09:00:00');
+        $results[] = new DateTime('1999-01-08 09:00:00');
+        $results[] = new DateTime('1999-01-09 09:00:00');
+        $results[] = new DateTime('1999-01-10 09:00:00');
+        $results[] = new DateTime('1999-01-11 09:00:00');
+        $results[] = new DateTime('1999-01-12 09:00:00');
+        $results[] = new DateTime('1999-01-13 09:00:00');
+        $results[] = new DateTime('1999-01-14 09:00:00');
+        $results[] = new DateTime('1999-01-15 09:00:00');
+        $results[] = new DateTime('1999-01-16 09:00:00');
+        $results[] = new DateTime('1999-01-17 09:00:00');
+        $results[] = new DateTime('1999-01-18 09:00:00');
+        $results[] = new DateTime('1999-01-19 09:00:00');
+        $results[] = new DateTime('1999-01-20 09:00:00');
+        $results[] = new DateTime('1999-01-21 09:00:00');
+        $results[] = new DateTime('1999-01-22 09:00:00');
+        $results[] = new DateTime('1999-01-23 09:00:00');
+        $results[] = new DateTime('1999-01-24 09:00:00');
+        $results[] = new DateTime('1999-01-25 09:00:00');
+        $results[] = new DateTime('1999-01-26 09:00:00');
+        $results[] = new DateTime('1999-01-27 09:00:00');
+        $results[] = new DateTime('1999-01-28 09:00:00');
+        $results[] = new DateTime('1999-01-29 09:00:00');
+        $results[] = new DateTime('1999-01-30 09:00:00');
+        $results[] = new DateTime('1999-01-31 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-01-02 09:00:00');
+        $results[] = new DateTime('2000-01-03 09:00:00');
+        $results[] = new DateTime('2000-01-04 09:00:00');
+        $results[] = new DateTime('2000-01-05 09:00:00');
+        $results[] = new DateTime('2000-01-06 09:00:00');
+        $results[] = new DateTime('2000-01-07 09:00:00');
+        $results[] = new DateTime('2000-01-08 09:00:00');
+        $results[] = new DateTime('2000-01-09 09:00:00');
+        $results[] = new DateTime('2000-01-10 09:00:00');
+        $results[] = new DateTime('2000-01-11 09:00:00');
+        $results[] = new DateTime('2000-01-12 09:00:00');
+        $results[] = new DateTime('2000-01-13 09:00:00');
+        $results[] = new DateTime('2000-01-14 09:00:00');
+        $results[] = new DateTime('2000-01-15 09:00:00');
+        $results[] = new DateTime('2000-01-16 09:00:00');
+        $results[] = new DateTime('2000-01-17 09:00:00');
+        $results[] = new DateTime('2000-01-18 09:00:00');
+        $results[] = new DateTime('2000-01-19 09:00:00');
+        $results[] = new DateTime('2000-01-20 09:00:00');
+        $results[] = new DateTime('2000-01-21 09:00:00');
+        $results[] = new DateTime('2000-01-22 09:00:00');
+        $results[] = new DateTime('2000-01-23 09:00:00');
+        $results[] = new DateTime('2000-01-24 09:00:00');
+        $results[] = new DateTime('2000-01-25 09:00:00');
+        $results[] = new DateTime('2000-01-26 09:00:00');
+        $results[] = new DateTime('2000-01-27 09:00:00');
+        $results[] = new DateTime('2000-01-28 09:00:00');
+        $results[] = new DateTime('2000-01-29 09:00:00');
+        $results[] = new DateTime('2000-01-30 09:00:00');
+        $results[] = new DateTime('2000-01-31 09:00:00');
+
+        $r = new When();
+
+        $r->startDate(new DateTime("19980101T090000"))
+          ->freq("yearly")
+          ->until(new DateTime("20000131T090000"))
+          ->bymonth("1")
+          ->byday("su,mo,tu,we,th,fr,sa")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Monday of week number 20 (where the default start of the week is Monday), forever:
+     * DTSTART;TZID=US-Eastern:19970512T090000
+     * RRULE:FREQ=YEARLY;BYWEEKNO=20;BYDAY=MO
+     * Results limited to first 10 since this has no enddate or count.
+     */
+     function testYearlyFive()
+     {
+        $results[] = new DateTime('1997-05-12 09:00:00');
+        $results[] = new DateTime('1998-05-11 09:00:00');
+        $results[] = new DateTime('1999-05-17 09:00:00');
+        $results[] = new DateTime('2000-05-15 09:00:00');
+        $results[] = new DateTime('2001-05-14 09:00:00');
+        $results[] = new DateTime('2002-05-13 09:00:00');
+        $results[] = new DateTime('2003-05-12 09:00:00');
+        $results[] = new DateTime('2004-05-10 09:00:00');
+        $results[] = new DateTime('2005-05-16 09:00:00');
+        $results[] = new DateTime('2006-05-15 09:00:00');
+
+        $r = new When();
+
+        $r->startDate(new DateTime("19970512T090000"))
+          ->freq("yearly")
+          ->count(10)
+          ->byweekno(20)
+          ->byday('mo')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+     }
+
+     /**
+      * Every Thursday in March, forever:
+      * DTSTART;TZID=US-Eastern:19970313T090000
+      * RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=TH
+      */
+     function testYearlySix()
+     {
+        $results[] = new DateTime('1997-03-13 09:00:00');
+        $results[] = new DateTime('1997-03-20 09:00:00');
+        $results[] = new DateTime('1997-03-27 09:00:00');
+        $results[] = new DateTime('1998-03-05 09:00:00');
+        $results[] = new DateTime('1998-03-12 09:00:00');
+        $results[] = new DateTime('1998-03-19 09:00:00');
+        $results[] = new DateTime('1998-03-26 09:00:00');
+        $results[] = new DateTime('1999-03-04 09:00:00');
+        $results[] = new DateTime('1999-03-11 09:00:00');
+        $results[] = new DateTime('1999-03-18 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970313T090000"))
+          ->freq("yearly")
+          ->count(10)
+          ->bymonth(3)
+          ->byday('th')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+     }
+
+    /**
+     * Every Thursday, but only during June, July, and August, forever:
+     * DTSTART;TZID=US-Eastern:19970605T090000
+     * RRULE:FREQ=YEARLY;BYDAY=TH;BYMONTH=6,7,8
+     */
+    function testYearlySeven()
+    {
+        $results[] = new DateTime('1997-06-05 09:00:00');
+        $results[] = new DateTime('1997-06-12 09:00:00');
+        $results[] = new DateTime('1997-06-19 09:00:00');
+        $results[] = new DateTime('1997-06-26 09:00:00');
+        $results[] = new DateTime('1997-07-03 09:00:00');
+        $results[] = new DateTime('1997-07-10 09:00:00');
+        $results[] = new DateTime('1997-07-17 09:00:00');
+        $results[] = new DateTime('1997-07-24 09:00:00');
+        $results[] = new DateTime('1997-07-31 09:00:00');
+        $results[] = new DateTime('1997-08-07 09:00:00');
+        $results[] = new DateTime('1997-08-14 09:00:00');
+        $results[] = new DateTime('1997-08-21 09:00:00');
+        $results[] = new DateTime('1997-08-28 09:00:00');
+        $results[] = new DateTime('1998-06-04 09:00:00');
+        $results[] = new DateTime('1998-06-11 09:00:00');
+        $results[] = new DateTime('1998-06-18 09:00:00');
+        $results[] = new DateTime('1998-06-25 09:00:00');
+        $results[] = new DateTime('1998-07-02 09:00:00');
+        $results[] = new DateTime('1998-07-09 09:00:00');
+        $results[] = new DateTime('1998-07-16 09:00:00');
+        $results[] = new DateTime('1998-07-23 09:00:00');
+        $results[] = new DateTime('1998-07-30 09:00:00');
+        $results[] = new DateTime('1998-08-06 09:00:00');
+        $results[] = new DateTime('1998-08-13 09:00:00');
+        $results[] = new DateTime('1998-08-20 09:00:00');
+        $results[] = new DateTime('1998-08-27 09:00:00');
+        $results[] = new DateTime('1999-06-03 09:00:00');
+        $results[] = new DateTime('1999-06-10 09:00:00');
+        $results[] = new DateTime('1999-06-17 09:00:00');
+        $results[] = new DateTime('1999-06-24 09:00:00');
+        $results[] = new DateTime('1999-07-01 09:00:00');
+        $results[] = new DateTime('1999-07-08 09:00:00');
+        $results[] = new DateTime('1999-07-15 09:00:00');
+        $results[] = new DateTime('1999-07-22 09:00:00');
+        $results[] = new DateTime('1999-07-29 09:00:00');
+        $results[] = new DateTime('1999-08-05 09:00:00');
+        $results[] = new DateTime('1999-08-12 09:00:00');
+        $results[] = new DateTime('1999-08-19 09:00:00');
+        $results[] = new DateTime('1999-08-26 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970605T090000"))
+          ->freq("yearly")
+          ->count(39)
+          ->bymonth("6,7,8")
+          ->byday('th')
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every four years, the first Tuesday after a Monday in November, forever (U.S. Presidential Election day):
+     * DTSTART;TZID=US-Eastern:19961105T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=4;BYMONTH=11;BYDAY=TU;BYMONTHDAY=2,3,4,5,6,7,8
+     */
+    function testYearlyEight()
+    {
+        $results[] = new DateTime('1996-11-05 09:00:00');
+        $results[] = new DateTime('2000-11-07 09:00:00');
+        $results[] = new DateTime('2004-11-02 09:00:00');
+        $results[] = new DateTime('2008-11-04 09:00:00');
+        $results[] = new DateTime('2012-11-06 09:00:00');
+        $results[] = new DateTime('2016-11-08 09:00:00');
+        $results[] = new DateTime('2020-11-03 09:00:00');
+        $results[] = new DateTime('2024-11-05 09:00:00');
+        $results[] = new DateTime('2028-11-07 09:00:00');
+        $results[] = new DateTime('2032-11-02 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19961105T090000"))
+          ->freq("yearly")
+          ->count(10)
+          ->interval(4)
+          ->bymonth(11)
+          ->byday('tu')
+          ->bymonthday("2,3,4,5,6,7,8")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every third year on the 1st, 100th, and 200th day for 10 occurrences:
+     * DTSTART;TZID=America/New_York:19970101T090000
+     * RRULE:FREQ=YEARLY;INTERVAL=3;COUNT=10;BYYEARDAY=1,100,200
+     */
+    function testYearlyNine()
+    {
+        $results[] = new DateTime('1997-01-01 09:00:00');
+        $results[] = new DateTime('1997-04-10 09:00:00');
+        $results[] = new DateTime('1997-07-19 09:00:00');
+        $results[] = new DateTime('2000-01-01 09:00:00');
+        $results[] = new DateTime('2000-04-09 09:00:00');
+        $results[] = new DateTime('2000-07-18 09:00:00');
+        $results[] = new DateTime('2003-01-01 09:00:00');
+        $results[] = new DateTime('2003-04-10 09:00:00');
+        $results[] = new DateTime('2003-07-19 09:00:00');
+        $results[] = new DateTime('2006-01-01 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("19970101T090000"))
+          ->freq("yearly")
+          ->count(10)
+          ->interval(3)
+          ->byyearday("1,100,200")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    // this test actually should have failed,
+    // I didn't set the proper start date for the calendar import
+    /**
+     * Every year on the -1th, -100th, and -200th day for 5 occurrences (checked via google calendar import below)
+     * BEGIN:VCALENDAR
+     * PRODID:-//Google Inc//Google Calendar 70.9054//EN
+     * VERSION:2.0
+     * CALSCALE:GREGORIAN
+     * METHOD:PUBLISH
+     * BEGIN:VTIMEZONE
+     * TZID:America/New_York
+     * X-LIC-LOCATION:America/New_York
+     * BEGIN:DAYLIGHT
+     * TZOFFSETFROM:-0500
+     * TZOFFSETTO:-0400
+     * TZNAME:EDT
+     * DTSTART:19700308T020000
+     * RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU
+     * END:DAYLIGHT
+     * BEGIN:STANDARD
+     * TZOFFSETFROM:-0400
+     * TZOFFSETTO:-0500
+     * TZNAME:EST
+     * DTSTART:19701101T020000
+     * RRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU
+     * END:STANDARD
+     * END:VTIMEZONE
+     * BEGIN:VEVENT
+     * DTSTART;VALUE=DATE:20101231
+     * RRULE:FREQ=YEARLY;COUNT=5;BYYEARDAY=-1,-100,-200
+     * DTSTAMP:20101231T090000
+     * CREATED:20101231T090000
+     * DESCRIPTION:
+     * LAST-MODIFIED:20101231T090000
+     * LOCATION:
+     * SEQUENCE:2
+     * STATUS:CONFIRMED
+     * SUMMARY:testing yearly event
+     * TRANSP:TRANSPARENT
+     * END:VEVENT
+     * END:VCALENDAR
+     */
+    function testYearlyTen()
+    {
+        $results[] = new DateTime('2010-12-31 09:00:00');
+        $results[] = new DateTime('2011-06-15 09:00:00');
+        $results[] = new DateTime('2011-09-23 09:00:00');
+        $results[] = new DateTime('2011-12-31 09:00:00');
+        $results[] = new DateTime('2012-06-15 09:00:00');
+
+        $r = new When();
+        $r->startDate(new DateTime("20101231T090000"))
+          ->freq("yearly")
+          ->count(5)
+          ->byyearday("-1, -100, -200")
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every Sunday in January every other year at 8:30 am and 9:30 am
+     * DTSTART;TZID=America/New_York:19970105T083000
+     * RRULE:FREQ=YEARLY;INTERVAL=2;BYMONTH=1;BYDAY=SU;BYHOUR=8,9;BYMINUTE=30
+     */
+    function testYearlyEleven()
+    {
+        $results[] = new DateTime("1997-01-05 08:30:00");
+        $results[] = new DateTime("1997-01-05 09:30:00");
+        $results[] = new DateTime("1997-01-12 08:30:00");
+        $results[] = new DateTime("1997-01-12 09:30:00");
+        $results[] = new DateTime("1997-01-19 08:30:00");
+        $results[] = new DateTime("1997-01-19 09:30:00");
+        $results[] = new DateTime("1997-01-26 08:30:00");
+        $results[] = new DateTime("1997-01-26 09:30:00");
+        $results[] = new DateTime("1999-01-03 08:30:00");
+        $results[] = new DateTime("1999-01-03 09:30:00");
+
+        $r = new When();
+        $r->startDate(new DateTime("19970105T083000"))
+          ->freq("yearly")
+          ->interval(2)
+          ->bymonth(1)
+          ->byday("su")
+          ->byhour("8,9")
+          ->byminute("30")
+          ->count(10)
+          ->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+    /**
+     * Every Sunday in January every other year at 8:30 am and 9:30 am
+     * DTSTART;TZID=America/New_York:19970105T083000
+     * RRULE:FREQ=YEARLY;INTERVAL=2;BYMONTH=1;BYDAY=SU;BYHOUR=8,9;BYMINUTE=30
+     */
+    function testYearlyTheninthnode()
+    {
+        $results[] = new DateTime("2015-09-17 00:00:00");
+        $results[] = new DateTime("2016-09-17 00:00:00");
+        $results[] = new DateTime("2017-09-17 00:00:00");
+        $results[] = new DateTime("2018-09-17 00:00:00");
+        $results[] = new DateTime("2019-09-17 00:00:00");
+
+        $r = new When();
+        $r->startDate(new DateTime('2015-09-17 00:00:00'));
+        $r->freq('yearly');
+        $r->interval(1);
+        $r->count(5);
+        $r->generateOccurrences();
+
+        $occurrences = $r->occurrences;
+
+        foreach ($results as $key => $result)
+        {
+            $this->assertEquals($result, $occurrences[$key]);
+        }
+    }
+
+}
